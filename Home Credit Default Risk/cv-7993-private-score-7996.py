
# coding: utf-8

# In[1]:

drop_col = [
 'application_NEW_EMPLOY_TO_BIRTH_GAP',
 'application_NAME_CONTRACT_TYPE_EXT_SOURCE_2',
 'application_NAME_CONTRACT_TYPE_EXT_SOURCE_3',
 'application_NAME_CONTRACT_TYPE_AMT_INCOME_TOTAL',
 'application_NAME_CONTRACT_TYPE_TARGET',
 'application_NAME_CONTRACT_TYPE_Cash loans',
 'application_NAME_CONTRACT_TYPE_Revolving loans',
 'BUREAU_DAYS_CREDIT_LASTmax',
 'BUREAU_DAYS_CREDIT_LASTmean',
 'BUREAU_DAYS_CREDIT_LASTsum',
 'BUREAU_DAYS_CREDIT_LASTstd',
 'BUREAU_CREDICT_SUM_DEBT_PERCsum',
 'BUREAU_CREDICT_SUM_LIMIT_PERCmean',
 'BUREAU_CREDICT_SUM_LIMIT_PERCsum',
 'BUREAU_CREDICT_SUM_LIMIT_PERCstd',
 'BUREAU_ANNUITY_CREDIT_SUM_PERCsum',
 'BUREAU_ACTIVE_DAYS_CREDIT_LAST_MAX',
 'BUREAU_ACTIVE_DAYS_CREDIT_LAST_MEAN',
 'BUREAU_ACTIVE_DAYS_CREDIT_LAST_SUM',
 'BUREAU_ACTIVE_DAYS_CREDIT_LAST_STD',
 'BUREAU_ACTIVE_CREDICT_SUM_DEBT_PERC_MAX',
 'BUREAU_ACTIVE_CREDICT_SUM_DEBT_PERC_SUM',
 'BUREAU_ACTIVE_ANNUITY_CREDIT_SUM_PERC_SUM',
 'BUREAU_CLOSED_AMT_CREDIT_SUM_OVERDUE_SUM',
 'BUREAU_CLOSED_DAYS_CREDIT_LAST_MAX',
 'BUREAU_CLOSED_DAYS_CREDIT_LAST_MEAN',
 'BUREAU_CLOSED_DAYS_CREDIT_LAST_SUM',
 'BUREAU_CLOSED_DAYS_CREDIT_LAST_STD',
 'BUREAU_CLOSED_CREDICT_SUM_LIMIT_PERC_MAX',
 'BUREAU_CLOSED_CREDICT_SUM_LIMIT_PERC_MEAN',
 'BUREAU_CLOSED_CREDICT_SUM_LIMIT_PERC_SUM',
 'BUREAU_CLOSED_CREDICT_SUM_LIMIT_PERC_STD',
 'BUREAU_CLOSED_CREDICT_SUM_OVERDUE_PERC_SUM',
 'BUREAU_30DAY_DAYS_CREDIT_MAX',
 'BUREAU_30DAY_CREDIT_DAY_OVERDUE_MEAN',
 'BUREAU_30DAY_CREDIT_DAY_OVERDUE_SUM',
 'BUREAU_30DAY_AMT_CREDIT_MAX_OVERDUE_MAX',
 'BUREAU_30DAY_AMT_CREDIT_MAX_OVERDUE_MEAN',
 'BUREAU_30DAY_AMT_CREDIT_MAX_OVERDUE_SUM',
 'BUREAU_30DAY_AMT_CREDIT_SUM_OVERDUE_MAX',
 'BUREAU_30DAY_AMT_CREDIT_SUM_OVERDUE_MEAN',
 'BUREAU_30DAY_AMT_CREDIT_SUM_OVERDUE_SUM',
 'BUREAU_30DAY_AMT_CREDIT_SUM_LIMIT_STD',
 'BUREAU_30DAY_CREDICT_SUM_LEFT_STD',
 'BUREAU_30DAY_DAYS_CREDIT_LAST_MAX',
 'BUREAU_30DAY_DAYS_CREDIT_LAST_MEAN',
 'BUREAU_30DAY_DAYS_CREDIT_LAST_SUM',
 'BUREAU_30DAY_DAYS_CREDIT_LAST_STD',
 'BUREAU_30DAY_DAYS_CREDIT_EARLY_STD',
 'BUREAU_30DAY_CREDICT_SUM_DEBT_PERC_MEAN',
 'BUREAU_30DAY_CREDICT_SUM_DEBT_PERC_SUM',
 'BUREAU_30DAY_CREDICT_SUM_DEBT_PERC_STD',
 'BUREAU_30DAY_CREDICT_SUM_LIMIT_PERC_STD',
 'BUREAU_30DAY_CREDICT_SUM_OVERDUE_PERC_MAX',
 'BUREAU_30DAY_CREDICT_SUM_OVERDUE_PERC_MEAN',
 'BUREAU_30DAY_CREDICT_SUM_OVERDUE_PERC_SUM',
 'BUREAU_30DAY_ANNUITY_CREDIT_SUM_PERC_SUM',
 'BUREAU_30DAY_ANNUITY_CREDIT_SUM_PERC_STD',
 'BUREAU_90DAY_DAYS_CREDIT_MAX',
 'BUREAU_90DAY_DAYS_CREDIT_MEAN',
 'BUREAU_90DAY_DAYS_CREDIT_SUM',
 'BUREAU_90DAY_DAYS_CREDIT_ENDDATE_MAX',
 'BUREAU_90DAY_DAYS_CREDIT_ENDDATE_MEAN',
 'BUREAU_90DAY_DAYS_CREDIT_ENDDATE_SUM',
 'BUREAU_90DAY_DAYS_CREDIT_UPDATE_MAX',
 'BUREAU_90DAY_DAYS_CREDIT_UPDATE_MEAN',
 'BUREAU_90DAY_DAYS_CREDIT_UPDATE_SUM',
 'BUREAU_90DAY_AMT_CREDIT_SUM_MAX',
 'BUREAU_90DAY_AMT_CREDIT_SUM_MEAN',
 'BUREAU_90DAY_AMT_CREDIT_SUM_SUM',
 'BUREAU_90DAY_AMT_CREDIT_SUM_DEBT_MAX',
 'BUREAU_90DAY_AMT_CREDIT_SUM_DEBT_MEAN',
 'BUREAU_90DAY_AMT_CREDIT_SUM_DEBT_SUM',
 'BUREAU_90DAY_AMT_CREDIT_SUM_OVERDUE_SUM',
 'BUREAU_90DAY_AMT_ANNUITY_SUM',
 'BUREAU_90DAY_MONTHS_BALANCE_SIZE_SUM',
 'BUREAU_90DAY_CREDICT_SUM_LEFT_MAX',
 'BUREAU_90DAY_CREDICT_SUM_LEFT_MEAN',
 'BUREAU_90DAY_CREDICT_SUM_LEFT_SUM',
 'BUREAU_90DAY_DAYS_CREDIT_LAST_MAX',
 'BUREAU_90DAY_DAYS_CREDIT_LAST_MEAN',
 'BUREAU_90DAY_DAYS_CREDIT_LAST_SUM',
 'BUREAU_90DAY_DAYS_CREDIT_LAST_STD',
 'BUREAU_90DAY_DAYS_CREDIT_EARLY_MAX',
 'BUREAU_90DAY_DAYS_CREDIT_EARLY_MEAN',
 'BUREAU_90DAY_DAYS_CREDIT_EARLY_SUM',
 'BUREAU_90DAY_CREDICT_SUM_DEBT_PERC_MAX',
 'BUREAU_90DAY_CREDICT_SUM_DEBT_PERC_MEAN',
 'BUREAU_90DAY_CREDICT_SUM_DEBT_PERC_SUM',
 'BUREAU_90DAY_CREDICT_SUM_DEBT_PERC_STD',
 'BUREAU_90DAY_CREDICT_SUM_OVERDUE_PERC_SUM',
 'BUREAU_90DAY_ANNUITY_CREDIT_PERC_SUM',
 'BUREAU_90DAY_ANNUITY_CREDIT_SUM_PERC_MAX',
 'BUREAU_90DAY_ANNUITY_CREDIT_SUM_PERC_MEAN',
 'BUREAU_90DAY_ANNUITY_CREDIT_SUM_PERC_SUM',
 'BUREAU_90DAY_ANNUITY_CREDIT_SUM_PERC_STD',
 'BUREAU_120DAY_DAYS_CREDIT_MAX',
 'BUREAU_120DAY_DAYS_CREDIT_MEAN',
 'BUREAU_120DAY_DAYS_CREDIT_SUM',
 'BUREAU_120DAY_DAYS_CREDIT_ENDDATE_MAX',
 'BUREAU_120DAY_DAYS_CREDIT_ENDDATE_MEAN',
 'BUREAU_120DAY_DAYS_CREDIT_ENDDATE_SUM',
 'BUREAU_120DAY_DAYS_CREDIT_UPDATE_MAX',
 'BUREAU_120DAY_DAYS_CREDIT_UPDATE_MEAN',
 'BUREAU_120DAY_DAYS_CREDIT_UPDATE_SUM',
 'BUREAU_120DAY_AMT_CREDIT_SUM_MAX',
 'BUREAU_120DAY_AMT_CREDIT_SUM_MEAN',
 'BUREAU_120DAY_AMT_CREDIT_SUM_SUM',
 'BUREAU_120DAY_AMT_CREDIT_SUM_DEBT_MAX',
 'BUREAU_120DAY_AMT_CREDIT_SUM_DEBT_MEAN',
 'BUREAU_120DAY_AMT_CREDIT_SUM_DEBT_SUM',
 'BUREAU_120DAY_AMT_ANNUITY_SUM',
 'BUREAU_120DAY_MONTHS_BALANCE_MIN_MIN',
 'BUREAU_120DAY_MONTHS_BALANCE_SIZE_SUM',
 'BUREAU_120DAY_CREDICT_SUM_LEFT_MAX',
 'BUREAU_120DAY_CREDICT_SUM_LEFT_MEAN',
 'BUREAU_120DAY_CREDICT_SUM_LEFT_SUM',
 'BUREAU_120DAY_DAYS_CREDIT_LAST_MAX',
 'BUREAU_120DAY_DAYS_CREDIT_LAST_MEAN',
 'BUREAU_120DAY_DAYS_CREDIT_LAST_SUM',
 'BUREAU_120DAY_DAYS_CREDIT_LAST_STD',
 'BUREAU_120DAY_DAYS_CREDIT_EARLY_MAX',
 'BUREAU_120DAY_DAYS_CREDIT_EARLY_MEAN',
 'BUREAU_120DAY_DAYS_CREDIT_EARLY_SUM',
 'BUREAU_120DAY_CREDICT_SUM_DEBT_PERC_MAX',
 'BUREAU_120DAY_CREDICT_SUM_DEBT_PERC_MEAN',
 'BUREAU_120DAY_CREDICT_SUM_DEBT_PERC_SUM',
 'BUREAU_120DAY_CREDICT_SUM_DEBT_PERC_STD',
 'BUREAU_120DAY_ANNUITY_CREDIT_PERC_SUM',
 'BUREAU_120DAY_ANNUITY_CREDIT_SUM_PERC_MAX',
 'BUREAU_120DAY_ANNUITY_CREDIT_SUM_PERC_MEAN',
 'BUREAU_120DAY_ANNUITY_CREDIT_SUM_PERC_SUM',
 'BUREAU_120DAY_ANNUITY_CREDIT_SUM_PERC_STD',
 'BUREAU_365DAY_DAYS_CREDIT_MAX',
 'BUREAU_365DAY_DAYS_CREDIT_LAST_MAX',
 'BUREAU_365DAY_DAYS_CREDIT_LAST_MEAN',
 'BUREAU_365DAY_DAYS_CREDIT_LAST_SUM',
 'BUREAU_365DAY_DAYS_CREDIT_LAST_STD',
 'BUREAU_365DAY_CREDICT_SUM_DEBT_PERC_MAX',
 'BUREAU_365DAY_CREDICT_SUM_DEBT_PERC_MEAN',
 'BUREAU_365DAY_CREDICT_SUM_DEBT_PERC_SUM',
 'BUREAU_365DAY_CREDICT_SUM_DEBT_PERC_STD',
 'BUREAU_365DAY_ANNUITY_CREDIT_SUM_PERC_MAX',
 'BUREAU_365DAY_ANNUITY_CREDIT_SUM_PERC_MEAN',
 'BUREAU_365DAY_ANNUITY_CREDIT_SUM_PERC_SUM',
 'BUREAU_365DAY_ANNUITY_CREDIT_SUM_PERC_STD',
 'PREV_APP_CREDIT_PERC_STD',
 'PREV_AMT_GOODS_PRICE_MAX',
 'PREV_AMT_GOODS_PRICE_SUM',
 'PREV_FLAG_LAST_APPL_PER_CONTRACT_Y_MEAN',
 'PREV_NAME_CASH_LOAN_PURPOSE_XAP_MEAN',
 'PREV_CODE_REJECT_REASON_CLIENT_MEAN',
 'APPROVED_AMT_GOODS_PRICE_MAX',
 'APPROVED_AMT_GOODS_PRICE_SUM',
 'APPROVED_CODE_REJECT_REASON_AMT_APPLICATION_MEAN',
 'APPROVED_CODE_REJECT_REASON_AMT_APPLICATION_MAX',
 'APPROVED_CODE_REJECT_REASON_AMT_APPLICATION_STD',
 'APPROVED_CODE_REJECT_REASON_AMT_CREDIT_MEAN',
 'APPROVED_CODE_REJECT_REASON_AMT_CREDIT_MAX',
 'APPROVED_CODE_REJECT_REASON_AMT_CREDIT_STD',
 'APPROVED_CODE_REJECT_REASON_AMT_DOWN_PAYMENT_MEAN',
 'APPROVED_CODE_REJECT_REASON_AMT_DOWN_PAYMENT_MAX',
 'APPROVED_CODE_REJECT_REASON_AMT_DOWN_PAYMENT_STD',
 'APPROVED_CODE_REJECT_REASON_DPD_BOOL_MEAN',
 'APPROVED_CODE_REJECT_REASON_DPD_BOOL_MAX',
 'APPROVED_CODE_REJECT_REASON_DPD_BOOL_STD',
 'REFUSED_APP_CREDIT_PERC_MAX',
 'REFUSED_APP_CREDIT_PERC_MEAN',
 'REFUSED_APP_CREDIT_PERC_SUM',
 'REFUSED_APP_CREDIT_PERC_STD',
 'REFUSED_AMT_DOWN_PAYMENT_STD',
 'REFUSED_RATE_DOWN_PAYMENT_STD',
 'REFUSED_CODE_REJECT_REASON_AMT_CREDIT_MAX',
 'REFUSED_CODE_REJECT_REASON_DPD_BOOL_MAX',
 '30DAY_AMT_ANNUITY_SUM',
 '30DAY_AMT_APPLICATION_MAX',
 '30DAY_AMT_APPLICATION_MEAN',
 '30DAY_AMT_APPLICATION_SUM',
 '30DAY_AMT_CREDIT_SUM',
 '30DAY_AMT_CREDIT_MAX',
 '30DAY_AMT_CREDIT_MEAN',
 '30DAY_APP_CREDIT_PERC_MAX',
 '30DAY_APP_CREDIT_PERC_MEAN',
 '30DAY_APP_CREDIT_PERC_SUM',
 '30DAY_ANNUITY_CREDIT_PERC_SUM',
 '30DAY_GOODS_PRICE_CREDIT_PERC_MAX',
 '30DAY_GOODS_PRICE_CREDIT_PERC_MEAN',
 '30DAY_GOODS_PRICE_CREDIT_PERC_SUM',
 '30DAY_AMT_DOWN_PAYMENT_STD',
 '30DAY_AMT_GOODS_PRICE_FIRST',
 '30DAY_AMT_GOODS_PRICE_MAX',
 '30DAY_AMT_GOODS_PRICE_MEAN',
 '30DAY_AMT_GOODS_PRICE_SUM',
 '30DAY_HOUR_APPR_PROCESS_START_MAX',
 '30DAY_HOUR_APPR_PROCESS_START_MEAN',
 '30DAY_HOUR_APPR_PROCESS_START_SUM',
 '30DAY_RATE_DOWN_PAYMENT_STD',
 '30DAY_DAYS_DECISION_MEAN',
 '30DAY_DAYS_DECISION_SUM',
 '30DAY_CNT_PAYMENT_SUM',
 '30DAY_APP_COODS_PERC_MEAN',
 '30DAY_APP_COODS_PERC_SUM',
 '30DAY_CODE_REJECT_REASON_AMT_ANNUITY_MEAN',
 '30DAY_CODE_REJECT_REASON_AMT_ANNUITY_MAX',
 '30DAY_CODE_REJECT_REASON_AMT_APPLICATION_MEAN',
 '30DAY_CODE_REJECT_REASON_AMT_APPLICATION_MAX',
 '30DAY_CODE_REJECT_REASON_AMT_CREDIT_MEAN',
 '30DAY_CODE_REJECT_REASON_AMT_CREDIT_MAX',
 '30DAY_CODE_REJECT_REASON_AMT_DOWN_PAYMENT_MEAN',
 '30DAY_PRODUCT_COMBINATION_AMT_ANNUITY_MEAN',
 '30DAY_PRODUCT_COMBINATION_AMT_ANNUITY_MAX',
 '30DAY_PRODUCT_COMBINATION_AMT_ANNUITY_STD',
 '30DAY_PRODUCT_COMBINATION_AMT_APPLICATION_MEAN',
 '30DAY_PRODUCT_COMBINATION_AMT_APPLICATION_MAX',
 '30DAY_PRODUCT_COMBINATION_AMT_CREDIT_MEAN',
 '30DAY_PRODUCT_COMBINATION_AMT_CREDIT_MAX',
 '30DAY_PRODUCT_COMBINATION_DPD_BOOL_MEAN',
 '30DAY_PRODUCT_COMBINATION_DPD_BOOL_MAX',
 '30DAY_PRODUCT_COMBINATION_SK_DPD_DIFF_MEAN',
 '30DAY_PRODUCT_COMBINATION_SK_DPD_DIFF_MAX',
 '30DAY_PRODUCT_COMBINATION_POS_TARGET_MEAN',
 '30DAY_PRODUCT_COMBINATION_POS_TARGET_MAX',
 '90DAY_AMT_ANNUITY_FIRST',
 '90DAY_AMT_ANNUITY_MAX',
 '90DAY_AMT_ANNUITY_MEAN',
 '90DAY_AMT_APPLICATION_STD',
 '90DAY_APP_CREDIT_PERC_MAX',
 '90DAY_APP_CREDIT_PERC_MEAN',
 '90DAY_APP_CREDIT_PERC_SUM',
 '90DAY_APP_CREDIT_PERC_STD',
 '90DAY_ANNUITY_CREDIT_PERC_MAX',
 '90DAY_ANNUITY_CREDIT_PERC_MEAN',
 '90DAY_ANNUITY_CREDIT_PERC_STD',
 '90DAY_GOODS_PRICE_CREDIT_PERC_MAX',
 '90DAY_GOODS_PRICE_CREDIT_PERC_MEAN',
 '90DAY_GOODS_PRICE_CREDIT_PERC_SUM',
 '90DAY_GOODS_PRICE_CREDIT_PERC_STD',
 '90DAY_AMT_GOODS_PRICE_FIRST',
 '90DAY_AMT_GOODS_PRICE_MAX',
 '90DAY_AMT_GOODS_PRICE_MEAN',
 '90DAY_AMT_GOODS_PRICE_SUM',
 '90DAY_DAYS_DECISION_STD',
 '90DAY_CNT_PAYMENT_MEAN',
 '90DAY_APP_COODS_PERC_MEAN',
 '90DAY_APP_COODS_PERC_STD',
 '90DAY_CODE_REJECT_REASON_AMT_ANNUITY_STD',
 '90DAY_CODE_REJECT_REASON_AMT_APPLICATION_STD',
 '90DAY_CODE_REJECT_REASON_AMT_CREDIT_STD',
 '90DAY_CODE_REJECT_REASON_AMT_DOWN_PAYMENT_STD',
 '90DAY_NAME_CASH_LOAN_PURPOSE_AMT_CREDIT_MEAN',
 '90DAY_NAME_GOODS_CATEGORY_AMT_ANNUITY_STD',
 '90DAY_NAME_GOODS_CATEGORY_AMT_APPLICATION_STD',
 '90DAY_NAME_GOODS_CATEGORY_AMT_CREDIT_STD',
 '90DAY_NAME_GOODS_CATEGORY_AMT_DOWN_PAYMENT_STD',
 '90DAY_NAME_GOODS_CATEGORY_DPD_BOOL_STD',
 '90DAY_NAME_GOODS_CATEGORY_SK_DPD_DIFF_STD',
 '90DAY_NAME_GOODS_CATEGORY_POS_TARGET_STD',
 '90DAY_PRODUCT_COMBINATION_AMT_ANNUITY_MEAN',
 '90DAY_PRODUCT_COMBINATION_AMT_ANNUITY_MAX',
 '90DAY_PRODUCT_COMBINATION_AMT_APPLICATION_STD',
 '90DAY_PRODUCT_COMBINATION_AMT_CREDIT_STD',
 '90DAY_PRODUCT_COMBINATION_AMT_DOWN_PAYMENT_STD',
 '90DAY_PRODUCT_COMBINATION_DPD_BOOL_MEAN',
 '90DAY_PRODUCT_COMBINATION_DPD_BOOL_MAX',
 '90DAY_PRODUCT_COMBINATION_POS_TARGET_MEAN',
 '90DAY_PRODUCT_COMBINATION_POS_TARGET_MAX',
 '120DAY_AMT_ANNUITY_FIRST',
 '120DAY_AMT_ANNUITY_MAX',
 '120DAY_AMT_ANNUITY_MEAN',
 '120DAY_AMT_APPLICATION_STD',
 '120DAY_APP_CREDIT_PERC_MAX',
 '120DAY_APP_CREDIT_PERC_MEAN',
 '120DAY_APP_CREDIT_PERC_SUM',
 '120DAY_APP_CREDIT_PERC_STD',
 '120DAY_ANNUITY_CREDIT_PERC_MAX',
 '120DAY_ANNUITY_CREDIT_PERC_MEAN',
 '120DAY_ANNUITY_CREDIT_PERC_STD',
 '120DAY_GOODS_PRICE_CREDIT_PERC_MAX',
 '120DAY_GOODS_PRICE_CREDIT_PERC_MEAN',
 '120DAY_GOODS_PRICE_CREDIT_PERC_SUM',
 '120DAY_AMT_GOODS_PRICE_FIRST',
 '120DAY_AMT_GOODS_PRICE_MAX',
 '120DAY_AMT_GOODS_PRICE_MEAN',
 '120DAY_AMT_GOODS_PRICE_SUM',
 '120DAY_DAYS_DECISION_STD',
 '120DAY_CNT_PAYMENT_MEAN',
 '120DAY_APP_COODS_PERC_MEAN',
 '120DAY_APP_COODS_PERC_STD',
 '120DAY_CODE_REJECT_REASON_AMT_ANNUITY_STD',
 '120DAY_CODE_REJECT_REASON_AMT_APPLICATION_STD',
 '120DAY_CODE_REJECT_REASON_AMT_CREDIT_STD',
 '120DAY_CODE_REJECT_REASON_AMT_DOWN_PAYMENT_STD',
 '120DAY_NAME_CASH_LOAN_PURPOSE_AMT_ANNUITY_STD',
 '120DAY_NAME_CASH_LOAN_PURPOSE_AMT_APPLICATION_STD',
 '120DAY_NAME_CASH_LOAN_PURPOSE_AMT_CREDIT_STD',
 '120DAY_NAME_CASH_LOAN_PURPOSE_AMT_DOWN_PAYMENT_STD',
 '120DAY_NAME_CASH_LOAN_PURPOSE_DPD_BOOL_STD',
 '120DAY_NAME_CASH_LOAN_PURPOSE_POS_TARGET_STD',
 '120DAY_NAME_GOODS_CATEGORY_AMT_ANNUITY_STD',
 '120DAY_NAME_GOODS_CATEGORY_AMT_APPLICATION_STD',
 '120DAY_NAME_GOODS_CATEGORY_AMT_CREDIT_STD',
 '120DAY_NAME_GOODS_CATEGORY_AMT_DOWN_PAYMENT_STD',
 '120DAY_NAME_GOODS_CATEGORY_DPD_BOOL_STD',
 '120DAY_NAME_GOODS_CATEGORY_SK_DPD_DIFF_STD',
 '120DAY_NAME_GOODS_CATEGORY_POS_TARGET_STD',
 '120DAY_PRODUCT_COMBINATION_AMT_ANNUITY_MEAN',
 '120DAY_PRODUCT_COMBINATION_AMT_APPLICATION_STD',
 '120DAY_PRODUCT_COMBINATION_AMT_CREDIT_STD',
 '120DAY_PRODUCT_COMBINATION_AMT_DOWN_PAYMENT_STD',
 '120DAY_PRODUCT_COMBINATION_DPD_BOOL_MEAN',
 '120DAY_PRODUCT_COMBINATION_DPD_BOOL_MAX',
 '120DAY_PRODUCT_COMBINATION_SK_DPD_DIFF_MAX',
 '120DAY_PRODUCT_COMBINATION_POS_TARGET_MEAN',
 '120DAY_PRODUCT_COMBINATION_POS_TARGET_MAX',
 'ONEYEAR_GOODS_PRICE_CREDIT_PERC_MAX',
 'ONEYEAR_GOODS_PRICE_CREDIT_PERC_MEAN',
 'ONEYEAR_GOODS_PRICE_CREDIT_PERC_SUM',
 'ONEYEAR_GOODS_PRICE_CREDIT_PERC_STD',
 'ONEYEAR_AMT_GOODS_PRICE_MAX',
 'ONEYEAR_AMT_GOODS_PRICE_SUM',
 'ONEYEAR_CODE_REJECT_REASON_AMT_APPLICATION_MEAN',
 'ONEYEAR_CODE_REJECT_REASON_AMT_APPLICATION_MAX',
 'ONEYEAR_CODE_REJECT_REASON_AMT_APPLICATION_STD',
 'ONEYEAR_CODE_REJECT_REASON_AMT_CREDIT_MEAN',
 'ONEYEAR_CODE_REJECT_REASON_AMT_CREDIT_MAX',
 'ONEYEAR_CODE_REJECT_REASON_AMT_CREDIT_STD',
 'ONEYEAR_CODE_REJECT_REASON_AMT_DOWN_PAYMENT_MEAN',
 'ONEYEAR_CODE_REJECT_REASON_AMT_DOWN_PAYMENT_STD',
 'ONEYEAR_CODE_REJECT_REASON_DPD_BOOL_MEAN',
 'ONEYEAR_CODE_REJECT_REASON_DPD_BOOL_MAX',
 'ONEYEAR_CODE_REJECT_REASON_DPD_BOOL_STD',
 'ONEYEAR_PRODUCT_COMBINATION_SK_DPD_DIFF_STD',
 'POS_TOTALMONTHS_BALANCE_MAX',
 'INSTAL_COUNT',
 'INSTAL_30DAY_DPD_STD',
 'INSTAL_30DAY_DPD_BOOL_FIRST',
 'INSTAL_30DAY_AMT_INSTALMENT_STD',
 'INSTAL_30DAY_AMT_PAYMENT_STD',
 'INSTAL_30DAY_DAYS_ENTRY_PAYMENT_STD',
 'INSTAL_90DAY_DPD_BOOL_FIRST',
 'INSTAL_120DAY_DPD_BOOL_FIRST',
 'INSTAL_120DAY_DAYS_ENTRY_PAYMENT_MAX',
 'INSTAL_365DAY_DPD_BOOL_FIRST',
 'INSTAL_365DAY_DAYS_ENTRY_PAYMENT_MAX',
 'INSTAL_3TIMES_DPD_BOOL_FIRST',
 'INSTAL_3TIMES_PAYMENT_PERC_STD',
 'INSTAL_3TIMES_DAYS_ENTRY_PAYMENT_MAX',
 'INSTAL_10TIMES_DPD_BOOL_FIRST',
 'INSTAL_10TIMES_DAYS_ENTRY_PAYMENT_MAX',
 'CC_PIVOT_AMT_BALANCE_MAX_36MON',
 'CC_PIVOT_AMT_BALANCE_MAX_ABOVE',
 'CC_PIVOT_AMT_BALANCE_MEAN_36MON',
 'CC_PIVOT_AMT_BALANCE_MEAN_ABOVE',
 'CC_PIVOT_AMT_BALANCE_STD_36MON',
 'CC_PIVOT_AMT_BALANCE_STD_ABOVE',
 'CC_PIVOT_AMT_BALANCE_SUM_36MON',
 'CC_PIVOT_AMT_BALANCE_SUM_ABOVE',
 'CC_PIVOT_AMT_CREDIT_LIMIT_ACTUAL_MAX_36MON',
 'CC_PIVOT_AMT_CREDIT_LIMIT_ACTUAL_MAX_ABOVE',
 'CC_PIVOT_AMT_CREDIT_LIMIT_ACTUAL_MEAN_36MON',
 'CC_PIVOT_AMT_CREDIT_LIMIT_ACTUAL_MEAN_ABOVE',
 'CC_PIVOT_AMT_CREDIT_LIMIT_ACTUAL_MIN_36MON',
 'CC_PIVOT_AMT_CREDIT_LIMIT_ACTUAL_MIN_ABOVE',
 'CC_PIVOT_AMT_CREDIT_LIMIT_ACTUAL_SUM_36MON',
 'CC_PIVOT_AMT_CREDIT_LIMIT_ACTUAL_SUM_ABOVE',
 'CC_PIVOT_AMT_DRAWINGS_ATM_CURRENT_MAX_36MON',
 'CC_PIVOT_AMT_DRAWINGS_ATM_CURRENT_MAX_ABOVE',
 'CC_PIVOT_AMT_DRAWINGS_ATM_CURRENT_MEAN_36MON',
 'CC_PIVOT_AMT_DRAWINGS_ATM_CURRENT_MEAN_ABOVE',
 'CC_PIVOT_AMT_DRAWINGS_ATM_CURRENT_SUM_36MON',
 'CC_PIVOT_AMT_DRAWINGS_ATM_CURRENT_SUM_ABOVE',
 'CC_PIVOT_AMT_DRAWINGS_ATM_PER_MAX_24MON',
 'CC_PIVOT_AMT_DRAWINGS_ATM_PER_MEAN_24MON',
 'CC_PIVOT_AMT_DRAWINGS_ATM_PER_MEAN_ABOVE',
 'CC_PIVOT_AMT_DRAWINGS_ATM_PER_STD_ABOVE',
 'CC_PIVOT_AMT_DRAWINGS_CURRENT_MAX_36MON',
 'CC_PIVOT_AMT_DRAWINGS_CURRENT_MAX_ABOVE',
 'CC_PIVOT_AMT_DRAWINGS_CURRENT_MEAN_36MON',
 'CC_PIVOT_AMT_DRAWINGS_CURRENT_MEAN_ABOVE',
 'CC_PIVOT_AMT_DRAWINGS_CURRENT_STD_36MON',
 'CC_PIVOT_AMT_DRAWINGS_CURRENT_STD_ABOVE',
 'CC_PIVOT_AMT_DRAWINGS_CURRENT_SUM_36MON',
 'CC_PIVOT_AMT_DRAWINGS_CURRENT_SUM_ABOVE',
 'CC_PIVOT_AMT_DRAWINGS_POS_CURRENT_MAX_36MON',
 'CC_PIVOT_AMT_DRAWINGS_POS_CURRENT_MAX_ABOVE',
 'CC_PIVOT_AMT_DRAWINGS_POS_CURRENT_MEAN_36MON',
 'CC_PIVOT_AMT_DRAWINGS_POS_CURRENT_MEAN_ABOVE',
 'CC_PIVOT_AMT_DRAWINGS_POS_CURRENT_STD_36MON',
 'CC_PIVOT_AMT_DRAWINGS_POS_CURRENT_STD_ABOVE',
 'CC_PIVOT_AMT_DRAWINGS_POS_CURRENT_SUM_36MON',
 'CC_PIVOT_AMT_DRAWINGS_POS_CURRENT_SUM_ABOVE',
 'CC_PIVOT_AMT_DRAWINGS_POS_CURRENT_PER_MAX_36MON',
 'CC_PIVOT_AMT_DRAWINGS_POS_CURRENT_PER_MAX_ABOVE',
 'CC_PIVOT_AMT_DRAWINGS_POS_CURRENT_PER_MEAN_36MON',
 'CC_PIVOT_AMT_DRAWINGS_POS_CURRENT_PER_MEAN_ABOVE',
 'CC_PIVOT_AMT_DRAWINGS_POS_CURRENT_PER_STD_24MON',
 'CC_PIVOT_AMT_DRAWINGS_POS_CURRENT_PER_STD_36MON',
 'CC_PIVOT_AMT_DRAWINGS_POS_CURRENT_PER_STD_ABOVE',
 'CC_PIVOT_AMT_INST_MIN_REGULARITY_MAX_36MON',
 'CC_PIVOT_AMT_INST_MIN_REGULARITY_MAX_ABOVE',
 'CC_PIVOT_AMT_INST_MIN_REGULARITY_MEAN_36MON',
 'CC_PIVOT_AMT_INST_MIN_REGULARITY_MEAN_ABOVE',
 'CC_PIVOT_AMT_INST_MIN_REGULARITY_STD_36MON',
 'CC_PIVOT_AMT_INST_MIN_REGULARITY_STD_ABOVE',
 'CC_PIVOT_AMT_INST_MIN_REGULARITY_SUM_36MON',
 'CC_PIVOT_AMT_INST_MIN_REGULARITY_SUM_ABOVE',
 'CC_PIVOT_AMT_PAYMENT_CURRENT_MAX_24MON',
 'CC_PIVOT_AMT_PAYMENT_CURRENT_MAX_36MON',
 'CC_PIVOT_AMT_PAYMENT_CURRENT_MAX_ABOVE',
 'CC_PIVOT_AMT_PAYMENT_CURRENT_MEAN_36MON',
 'CC_PIVOT_AMT_PAYMENT_CURRENT_MEAN_ABOVE',
 'CC_PIVOT_AMT_PAYMENT_CURRENT_STD_24MON',
 'CC_PIVOT_AMT_PAYMENT_CURRENT_STD_36MON',
 'CC_PIVOT_AMT_PAYMENT_CURRENT_STD_ABOVE',
 'CC_PIVOT_AMT_PAYMENT_CURRENT_SUM_36MON',
 'CC_PIVOT_AMT_PAYMENT_CURRENT_SUM_ABOVE',
 'CC_PIVOT_AMT_PAYMENT_MIN_REGULARITY_PERC_MAX_2MON',
 'CC_PIVOT_AMT_PAYMENT_MIN_REGULARITY_PERC_MAX_24MON',
 'CC_PIVOT_AMT_PAYMENT_MIN_REGULARITY_PERC_MAX_36MON',
 'CC_PIVOT_AMT_PAYMENT_MIN_REGULARITY_PERC_MEAN_2MON',
 'CC_PIVOT_AMT_PAYMENT_MIN_REGULARITY_PERC_MEAN_36MON',
 'CC_PIVOT_AMT_PAYMENT_MIN_REGULARITY_PERC_MIN_2MON',
 'CC_PIVOT_AMT_PAYMENT_MIN_REGULARITY_PERC_MIN_36MON',
 'CC_PIVOT_AMT_PAYMENT_MIN_REGULARITY_PERC_MIN_ABOVE',
 'CC_PIVOT_AMT_PAYMENT_MIN_REGULARITY_PERC_SUM_2MON',
 'CC_PIVOT_AMT_PAYMENT_MIN_REGULARITY_PERC_SUM_4MON',
 'CC_PIVOT_AMT_PAYMENT_MIN_REGULARITY_PERC_SUM_24MON',
 'CC_PIVOT_AMT_PAYMENT_MIN_REGULARITY_PERC_SUM_36MON',
 'CC_PIVOT_AMT_PAYMENT_TOTAL_CURRENT_MAX_36MON',
 'CC_PIVOT_AMT_PAYMENT_TOTAL_CURRENT_MAX_ABOVE',
 'CC_PIVOT_AMT_PAYMENT_TOTAL_CURRENT_MEAN_36MON',
 'CC_PIVOT_AMT_PAYMENT_TOTAL_CURRENT_MEAN_ABOVE',
 'CC_PIVOT_AMT_PAYMENT_TOTAL_CURRENT_STD_36MON',
 'CC_PIVOT_AMT_PAYMENT_TOTAL_CURRENT_STD_ABOVE',
 'CC_PIVOT_AMT_PAYMENT_TOTAL_CURRENT_SUM_36MON',
 'CC_PIVOT_AMT_PAYMENT_TOTAL_CURRENT_SUM_ABOVE',
 'CC_PIVOT_AMT_RECEIVABLE_PRINCIPAL_MAX_36MON',
 'CC_PIVOT_AMT_RECEIVABLE_PRINCIPAL_MAX_ABOVE',
 'CC_PIVOT_AMT_RECEIVABLE_PRINCIPAL_MEAN_36MON',
 'CC_PIVOT_AMT_RECEIVABLE_PRINCIPAL_MEAN_ABOVE',
 'CC_PIVOT_AMT_RECEIVABLE_PRINCIPAL_STD_36MON',
 'CC_PIVOT_AMT_RECEIVABLE_PRINCIPAL_STD_ABOVE',
 'CC_PIVOT_AMT_RECEIVABLE_PRINCIPAL_SUM_36MON',
 'CC_PIVOT_AMT_RECEIVABLE_PRINCIPAL_SUM_ABOVE',
 'CC_PIVOT_AMT_RECIVABLE_MAX_2MON',
 'CC_PIVOT_AMT_RECIVABLE_MAX_4MON',
 'CC_PIVOT_AMT_RECIVABLE_MAX_12MON',
 'CC_PIVOT_AMT_RECIVABLE_MAX_24MON',
 'CC_PIVOT_AMT_RECIVABLE_MAX_36MON',
 'CC_PIVOT_AMT_RECIVABLE_MAX_ABOVE',
 'CC_PIVOT_AMT_RECIVABLE_MEAN_2MON',
 'CC_PIVOT_AMT_RECIVABLE_MEAN_4MON',
 'CC_PIVOT_AMT_RECIVABLE_MEAN_12MON',
 'CC_PIVOT_AMT_RECIVABLE_MEAN_24MON',
 'CC_PIVOT_AMT_RECIVABLE_MEAN_36MON',
 'CC_PIVOT_AMT_RECIVABLE_MEAN_ABOVE',
 'CC_PIVOT_AMT_RECIVABLE_STD_36MON',
 'CC_PIVOT_AMT_RECIVABLE_STD_ABOVE',
 'CC_PIVOT_AMT_RECIVABLE_SUM_2MON',
 'CC_PIVOT_AMT_RECIVABLE_SUM_4MON',
 'CC_PIVOT_AMT_RECIVABLE_SUM_12MON',
 'CC_PIVOT_AMT_RECIVABLE_SUM_24MON',
 'CC_PIVOT_AMT_RECIVABLE_SUM_36MON',
 'CC_PIVOT_AMT_RECIVABLE_SUM_ABOVE',
 'CC_PIVOT_AMT_RECIVABLE_BALANCE_MAX_36MON',
 'CC_PIVOT_AMT_RECIVABLE_BALANCE_MAX_ABOVE',
 'CC_PIVOT_AMT_RECIVABLE_BALANCE_MEAN_36MON',
 'CC_PIVOT_AMT_RECIVABLE_BALANCE_MEAN_ABOVE',
 'CC_PIVOT_AMT_RECIVABLE_BALANCE_STD_36MON',
 'CC_PIVOT_AMT_RECIVABLE_BALANCE_STD_ABOVE',
 'CC_PIVOT_AMT_TOTAL_RECEIVABLE_MAX_2MON',
 'CC_PIVOT_AMT_TOTAL_RECEIVABLE_MAX_4MON',
 'CC_PIVOT_AMT_TOTAL_RECEIVABLE_MAX_12MON',
 'CC_PIVOT_AMT_TOTAL_RECEIVABLE_MAX_24MON',
 'CC_PIVOT_AMT_TOTAL_RECEIVABLE_MAX_36MON',
 'CC_PIVOT_AMT_TOTAL_RECEIVABLE_MAX_ABOVE',
 'CC_PIVOT_AMT_TOTAL_RECEIVABLE_MEAN_2MON',
 'CC_PIVOT_AMT_TOTAL_RECEIVABLE_MEAN_4MON',
 'CC_PIVOT_AMT_TOTAL_RECEIVABLE_MEAN_12MON',
 'CC_PIVOT_AMT_TOTAL_RECEIVABLE_MEAN_24MON',
 'CC_PIVOT_AMT_TOTAL_RECEIVABLE_MEAN_36MON',
 'CC_PIVOT_AMT_TOTAL_RECEIVABLE_MEAN_ABOVE',
 'CC_PIVOT_AMT_TOTAL_RECEIVABLE_STD_2MON',
 'CC_PIVOT_AMT_TOTAL_RECEIVABLE_STD_4MON',
 'CC_PIVOT_AMT_TOTAL_RECEIVABLE_STD_12MON',
 'CC_PIVOT_AMT_TOTAL_RECEIVABLE_STD_24MON',
 'CC_PIVOT_AMT_TOTAL_RECEIVABLE_STD_36MON',
 'CC_PIVOT_AMT_TOTAL_RECEIVABLE_STD_ABOVE',
 'CC_PIVOT_AMT_TOTAL_RECEIVABLE_SUM_2MON',
 'CC_PIVOT_AMT_TOTAL_RECEIVABLE_SUM_4MON',
 'CC_PIVOT_AMT_TOTAL_RECEIVABLE_SUM_12MON',
 'CC_PIVOT_AMT_TOTAL_RECEIVABLE_SUM_24MON',
 'CC_PIVOT_AMT_TOTAL_RECEIVABLE_SUM_36MON',
 'CC_PIVOT_AMT_TOTAL_RECEIVABLE_SUM_ABOVE',
 'CC_PIVOT_CNT_DRAWINGS_ATM_PER_MAX_24MON',
 'CC_PIVOT_CNT_DRAWINGS_ATM_PER_MEAN_24MON',
 'CC_PIVOT_CNT_DRAWINGS_ATM_PER_MEAN_ABOVE',
 'CC_PIVOT_CNT_DRAWINGS_ATM_PER_STD_ABOVE',
 'CC_PIVOT_CNT_DRAWINGS_CURRENT_MAX_36MON',
 'CC_PIVOT_CNT_DRAWINGS_CURRENT_MAX_ABOVE',
 'CC_PIVOT_CNT_DRAWINGS_CURRENT_MEAN_36MON',
 'CC_PIVOT_CNT_DRAWINGS_CURRENT_MEAN_ABOVE',
 'CC_PIVOT_CNT_DRAWINGS_CURRENT_STD_36MON',
 'CC_PIVOT_CNT_DRAWINGS_CURRENT_STD_ABOVE',
 'CC_PIVOT_CNT_DRAWINGS_CURRENT_SUM_36MON',
 'CC_PIVOT_CNT_DRAWINGS_CURRENT_SUM_ABOVE',
 'CC_PIVOT_CNT_DRAWINGS_POS_AVG_MAX_4MON',
 'CC_PIVOT_CNT_DRAWINGS_POS_AVG_MAX_24MON',
 'CC_PIVOT_CNT_DRAWINGS_POS_AVG_MAX_ABOVE',
 'CC_PIVOT_CNT_DRAWINGS_POS_AVG_MEAN_4MON',
 'CC_PIVOT_CNT_DRAWINGS_POS_AVG_MEAN_24MON',
 'CC_PIVOT_CNT_DRAWINGS_POS_AVG_MEAN_ABOVE',
 'CC_PIVOT_CNT_DRAWINGS_POS_AVG_STD_12MON',
 'CC_PIVOT_CNT_DRAWINGS_POS_AVG_STD_36MON',
 'CC_PIVOT_CNT_DRAWINGS_POS_AVG_STD_ABOVE',
 'CC_PIVOT_CNT_DRAWINGS_POS_CURRENT_MAX_36MON',
 'CC_PIVOT_CNT_DRAWINGS_POS_CURRENT_MAX_ABOVE',
 'CC_PIVOT_CNT_DRAWINGS_POS_CURRENT_MEAN_36MON',
 'CC_PIVOT_CNT_DRAWINGS_POS_CURRENT_MEAN_ABOVE',
 'CC_PIVOT_CNT_DRAWINGS_POS_CURRENT_STD_36MON',
 'CC_PIVOT_CNT_DRAWINGS_POS_CURRENT_STD_ABOVE',
 'CC_PIVOT_CNT_DRAWINGS_POS_CURRENT_SUM_36MON',
 'CC_PIVOT_CNT_DRAWINGS_POS_CURRENT_SUM_ABOVE',
 'CC_PIVOT_CNT_INSTALMENT_MATURE_CUM_MAX_36MON',
 'CC_PIVOT_CNT_INSTALMENT_MATURE_CUM_MAX_ABOVE',
 'CC_PIVOT_CNT_INSTALMENT_MATURE_CUM_MEAN_36MON',
 'CC_PIVOT_CNT_INSTALMENT_MATURE_CUM_MEAN_ABOVE',
 'CC_PIVOT_CNT_INSTALMENT_MATURE_CUM_STD_36MON',
 'CC_PIVOT_CNT_INSTALMENT_MATURE_CUM_STD_ABOVE',
 'CC_PIVOT_CNT_INSTALMENT_MATURE_CUM_SUM_36MON',
 'CC_PIVOT_CNT_INSTALMENT_MATURE_CUM_SUM_ABOVE',
 'CC_PIVOT_DRAWINGS_ATM_PERC_MAX_ABOVE',
 'CC_PIVOT_DRAWINGS_ATM_PERC_MEAN_ABOVE',
 'CC_PIVOT_DRAWINGS_ATM_PERC_STD_2MON',
 'CC_PIVOT_DRAWINGS_ATM_PERC_STD_12MON',
 'CC_PIVOT_DRAWINGS_ATM_PERC_STD_ABOVE',
 'CC_PIVOT_DRAWINGS_ATM_PERC_SUM_36MON',
 'CC_PIVOT_DRAWINGS_ATM_PERC_SUM_ABOVE',
 'CC_PIVOT_DRAWINGS_OTHER_PERC_MAX_2MON',
 'CC_PIVOT_DRAWINGS_OTHER_PERC_MAX_4MON',
 'CC_PIVOT_DRAWINGS_OTHER_PERC_MAX_12MON',
 'CC_PIVOT_DRAWINGS_OTHER_PERC_MAX_24MON',
 'CC_PIVOT_DRAWINGS_OTHER_PERC_MAX_36MON',
 'CC_PIVOT_DRAWINGS_OTHER_PERC_MAX_ABOVE',
 'CC_PIVOT_DRAWINGS_OTHER_PERC_MEAN_2MON',
 'CC_PIVOT_DRAWINGS_OTHER_PERC_MEAN_4MON',
 'CC_PIVOT_DRAWINGS_OTHER_PERC_MEAN_12MON',
 'CC_PIVOT_DRAWINGS_OTHER_PERC_MEAN_24MON',
 'CC_PIVOT_DRAWINGS_OTHER_PERC_MEAN_36MON',
 'CC_PIVOT_DRAWINGS_OTHER_PERC_MEAN_ABOVE',
 'CC_PIVOT_DRAWINGS_OTHER_PERC_STD_2MON',
 'CC_PIVOT_DRAWINGS_OTHER_PERC_STD_4MON',
 'CC_PIVOT_DRAWINGS_OTHER_PERC_STD_12MON',
 'CC_PIVOT_DRAWINGS_OTHER_PERC_STD_24MON',
 'CC_PIVOT_DRAWINGS_OTHER_PERC_STD_36MON',
 'CC_PIVOT_DRAWINGS_OTHER_PERC_STD_ABOVE',
 'CC_PIVOT_DRAWINGS_POS_PERC_MAX_2MON',
 'CC_PIVOT_DRAWINGS_POS_PERC_MAX_4MON',
 'CC_PIVOT_DRAWINGS_POS_PERC_MAX_12MON',
 'CC_PIVOT_DRAWINGS_POS_PERC_MAX_24MON',
 'CC_PIVOT_DRAWINGS_POS_PERC_MAX_36MON',
 'CC_PIVOT_DRAWINGS_POS_PERC_MAX_ABOVE',
 'CC_PIVOT_DRAWINGS_POS_PERC_MEAN_2MON',
 'CC_PIVOT_DRAWINGS_POS_PERC_MEAN_4MON',
 'CC_PIVOT_DRAWINGS_POS_PERC_MEAN_12MON',
 'CC_PIVOT_DRAWINGS_POS_PERC_MEAN_24MON',
 'CC_PIVOT_DRAWINGS_POS_PERC_MEAN_36MON',
 'CC_PIVOT_DRAWINGS_POS_PERC_MEAN_ABOVE',
 'CC_PIVOT_DRAWINGS_POS_PERC_STD_2MON',
 'CC_PIVOT_DRAWINGS_POS_PERC_STD_4MON',
 'CC_PIVOT_DRAWINGS_POS_PERC_STD_12MON',
 'CC_PIVOT_DRAWINGS_POS_PERC_STD_24MON',
 'CC_PIVOT_DRAWINGS_POS_PERC_STD_36MON',
 'CC_PIVOT_DRAWINGS_POS_PERC_STD_ABOVE',
 'CC_PIVOT_DRAWINGS_POS_PERC_SUM_36MON',
 'CC_PIVOT_DRAWINGS_POS_PERC_SUM_ABOVE',
 'CC_PIVOT_DRAWING_PERC_MAX_24MON',
 'CC_PIVOT_DRAWING_PERC_MAX_ABOVE',
 'CC_PIVOT_DRAWING_PERC_MEAN_24MON',
 'CC_PIVOT_DRAWING_PERC_MEAN_ABOVE',
 'CC_PIVOT_DRAWING_PERC_MIN_24MON',
 'CC_PIVOT_DRAWING_PERC_MIN_ABOVE',
 'CC_PIVOT_DRAWING_PERC_SUM_36MON',
 'CC_PIVOT_DRAWING_PERC_SUM_ABOVE',
 'CC_PIVOT_MONTHS_BALANCE_MAX_ABOVE',
 'CC_PIVOT_PAYMENT_INSTALMENT_PERC_MAX_36MON',
 'CC_PIVOT_PAYMENT_INSTALMENT_PERC_MAX_ABOVE',
 'CC_PIVOT_PAYMENT_INSTALMENT_PERC_MEAN_36MON',
 'CC_PIVOT_PAYMENT_INSTALMENT_PERC_MEAN_ABOVE',
 'CC_PIVOT_PAYMENT_INSTALMENT_PERC_STD_24MON',
 'CC_PIVOT_PAYMENT_INSTALMENT_PERC_STD_36MON',
 'CC_PIVOT_PAYMENT_INSTALMENT_PERC_STD_ABOVE',
 'CC_PIVOT_PAYMENT_INSTALMENT_PERC_SUM_36MON',
 'CC_PIVOT_PAYMENT_INSTALMENT_PERC_SUM_ABOVE',
 'CC_PIVOT_SK_DPD_MAX_ABOVE',
 'CC_PIVOT_SK_DPD_MEAN_ABOVE',
 'CC_PIVOT_SK_DPD_STD_ABOVE',
 'CC_PIVOT_SK_DPD_SUM_24MON',
 'CC_PIVOT_SK_DPD_SUM_36MON',
 'CC_PIVOT_SK_DPD_SUM_ABOVE',
 'CC_PIVOT_SK_DPD_DEF_MAX_ABOVE',
 'CC_PIVOT_SK_DPD_DEF_MEAN_ABOVE',
 'CC_PIVOT_SK_DPD_DEF_STD_ABOVE',
 'CC_PIVOT_SK_DPD_DEF_SUM_4MON',
 'CC_PIVOT_SK_DPD_DEF_SUM_36MON',
 'CC_PIVOT_SK_DPD_DEF_SUM_ABOVE',
 'CC_PIVOT_SK_DPD_DIFF_SUM_12MON',
 'CC_PIVOT_SK_DPD_DIFF_SUM_24MON',
 'CC_PIVOT_SK_DPD_DIFF_SUM_36MON',
 'CC_TOTAL_MONTHS_BALANCE_MIN',
 'CC_TOTAL_MONTHS_BALANCE_MAX',
 'CC_TOTAL_AMT_RECIVABLE_STD',
 'CC_TOTAL_AMT_RECIVABLE_MAX',
 'CC_TOTAL_AMT_RECIVABLE_MEAN',
 'CC_TOTAL_AMT_RECIVABLE_SUM',
 'CC_TOTAL_AMT_TOTAL_RECEIVABLE_STD',
 'CC_TOTAL_AMT_TOTAL_RECEIVABLE_MAX',
 'CC_TOTAL_AMT_TOTAL_RECEIVABLE_MEAN',
 'CC_TOTAL_AMT_TOTAL_RECEIVABLE_SUM',
 'CC_TOTAL_CNT_INSTALMENT_MATURE_CUM_MAX',
 'CC_TOTAL_AMT_PAYMENT_MIN_REGULARITY_PERC_MAX',
 'CC_TOTAL_AMT_PAYMENT_MIN_REGULARITY_PERC_MEAN',
 'CC_TOTAL_DRAWING_PERC_MAX',
 'CC_TOTAL_DRAWING_PERC_MEAN',
 'CC_TOTAL_DRAWINGS_OTHER_PERC_MAX',
 'CC_TOTAL_DRAWINGS_OTHER_PERC_MEAN',
 'CC_TOTAL_DRAWINGS_POS_PERC_MAX',
 'CC_TOTAL_DRAWINGS_POS_PERC_MEAN',
 'CC_TOTAL_DRAWINGS_POS_PERC_STD',
 'CC_TOTAL_CNT_DRAWINGS_POS_AVG_MAX',
 'CC_TOTAL_CNT_DRAWINGS_POS_AVG_MEAN',
 'CC_TOTAL_CNT_DRAWINGS_POS_AVG_STD',
 'BUREAU_30DAY_AMT_ANNUITY_SUM_application_AMT_ANNUITY_PERC',
 'BUREAU_30DAY_CREDIT_TYPE_AMT_ANNUITY_MEAN_application_AMT_ANNUITY_PERC',
 'BUREAU_90DAY_AMT_ANNUITY_SUM_application_AMT_ANNUITY_PERC',
 'BUREAU_90DAY_CREDIT_TYPE_AMT_ANNUITY_MEAN_application_AMT_ANNUITY_PERC',
 'BUREAU_90DAY_CREDIT_TYPE_AMT_ANNUITY_STD_application_AMT_ANNUITY_PERC',
 'BUREAU_120DAY_AMT_ANNUITY_SUM_application_AMT_ANNUITY_PERC',
 'BUREAU_120DAY_CREDIT_TYPE_AMT_ANNUITY_MEAN_application_AMT_ANNUITY_PERC',
 'BUREAU_365DAY_AMT_ANNUITY_FIRST_application_AMT_ANNUITY_PERC',
 'BUREAU_365DAY_AMT_ANNUITY_MAX_application_AMT_ANNUITY_PERC',
 'BUREAU_365DAY_AMT_ANNUITY_MEAN_application_AMT_ANNUITY_PERC',
 'BUREAU_365DAY_CREDIT_TYPE_AMT_ANNUITY_STD_application_AMT_ANNUITY_PERC',
 'APPROVED_CODE_REJECT_REASON_AMT_ANNUITY_MAX_application_AMT_ANNUITY_PERC',
 'REFUSED_PRODUCT_COMBINATION_AMT_ANNUITY_STD_application_AMT_ANNUITY_PERC',
 '30DAY_AMT_ANNUITY_FIRST_application_AMT_ANNUITY_PERC',
 '30DAY_AMT_ANNUITY_SUM_application_AMT_ANNUITY_PERC',
 '30DAY_AMT_ANNUITY_MAX_application_AMT_ANNUITY_PERC',
 '30DAY_AMT_ANNUITY_MEAN_application_AMT_ANNUITY_PERC',
 '30DAY_CODE_REJECT_REASON_AMT_ANNUITY_MEAN_application_AMT_ANNUITY_PERC',
 '30DAY_CODE_REJECT_REASON_AMT_ANNUITY_MAX_application_AMT_ANNUITY_PERC',
 '30DAY_CODE_REJECT_REASON_AMT_ANNUITY_STD_application_AMT_ANNUITY_PERC',
 '30DAY_NAME_CASH_LOAN_PURPOSE_AMT_ANNUITY_MEAN_application_AMT_ANNUITY_PERC',
 '30DAY_NAME_CASH_LOAN_PURPOSE_AMT_ANNUITY_MAX_application_AMT_ANNUITY_PERC',
 '30DAY_NAME_GOODS_CATEGORY_AMT_ANNUITY_MEAN_application_AMT_ANNUITY_PERC',
 '30DAY_NAME_GOODS_CATEGORY_AMT_ANNUITY_MAX_application_AMT_ANNUITY_PERC',
 '30DAY_PRODUCT_COMBINATION_AMT_ANNUITY_MEAN_application_AMT_ANNUITY_PERC',
 '30DAY_PRODUCT_COMBINATION_AMT_ANNUITY_MAX_application_AMT_ANNUITY_PERC',
 '90DAY_AMT_ANNUITY_FIRST_application_AMT_ANNUITY_PERC',
 '90DAY_AMT_ANNUITY_MAX_application_AMT_ANNUITY_PERC',
 '90DAY_AMT_ANNUITY_MEAN_application_AMT_ANNUITY_PERC',
 '90DAY_CODE_REJECT_REASON_AMT_ANNUITY_STD_application_AMT_ANNUITY_PERC',
 '90DAY_NAME_CASH_LOAN_PURPOSE_AMT_ANNUITY_STD_application_AMT_ANNUITY_PERC',
 '90DAY_NAME_GOODS_CATEGORY_AMT_ANNUITY_STD_application_AMT_ANNUITY_PERC',
 '90DAY_PRODUCT_COMBINATION_AMT_ANNUITY_MEAN_application_AMT_ANNUITY_PERC',
 '90DAY_PRODUCT_COMBINATION_AMT_ANNUITY_MAX_application_AMT_ANNUITY_PERC',
 '120DAY_AMT_ANNUITY_FIRST_application_AMT_ANNUITY_PERC',
 '120DAY_AMT_ANNUITY_MAX_application_AMT_ANNUITY_PERC',
 '120DAY_AMT_ANNUITY_MEAN_application_AMT_ANNUITY_PERC',
 '120DAY_CODE_REJECT_REASON_AMT_ANNUITY_STD_application_AMT_ANNUITY_PERC',
 '120DAY_NAME_CASH_LOAN_PURPOSE_AMT_ANNUITY_STD_application_AMT_ANNUITY_PERC',
 '120DAY_NAME_GOODS_CATEGORY_AMT_ANNUITY_STD_application_AMT_ANNUITY_PERC',
 '120DAY_PRODUCT_COMBINATION_AMT_ANNUITY_MEAN_application_AMT_ANNUITY_PERC',
 '120DAY_PRODUCT_COMBINATION_AMT_ANNUITY_MAX_application_AMT_ANNUITY_PERC',
 '120DAY_PRODUCT_COMBINATION_AMT_ANNUITY_STD_application_AMT_ANNUITY_PERC',
 'ONEYEAR_CODE_REJECT_REASON_AMT_ANNUITY_MEAN_application_AMT_ANNUITY_PERC',
 'ONEYEAR_CODE_REJECT_REASON_AMT_ANNUITY_MAX_application_AMT_ANNUITY_PERC',
 'ONEYEAR_NAME_GOODS_CATEGORY_AMT_ANNUITY_STD_application_AMT_ANNUITY_PERC',
 'REFUSED_AMT_GOODS_PRICE_STD_application_AMT_GOODS_PRICE_PERC',
 '30DAY_AMT_GOODS_PRICE_FIRST_application_AMT_GOODS_PRICE_PERC',
 '30DAY_AMT_GOODS_PRICE_MAX_application_AMT_GOODS_PRICE_PERC',
 '30DAY_AMT_GOODS_PRICE_MEAN_application_AMT_GOODS_PRICE_PERC',
 '30DAY_AMT_GOODS_PRICE_SUM_application_AMT_GOODS_PRICE_PERC',
 '90DAY_AMT_GOODS_PRICE_FIRST_application_AMT_GOODS_PRICE_PERC',
 '90DAY_AMT_GOODS_PRICE_MAX_application_AMT_GOODS_PRICE_PERC',
 '90DAY_AMT_GOODS_PRICE_MEAN_application_AMT_GOODS_PRICE_PERC',
 '120DAY_AMT_GOODS_PRICE_FIRST_application_AMT_GOODS_PRICE_PERC',
 '120DAY_AMT_GOODS_PRICE_MAX_application_AMT_GOODS_PRICE_PERC',
 '120DAY_AMT_GOODS_PRICE_MEAN_application_AMT_GOODS_PRICE_PERC',
 'BUREAU_CLOSED_AMT_CREDIT_SUM_OVERDUE_SUM_application_AMT_CREDIT_PERC',
 'BUREAU_30DAY_AMT_CREDIT_MAX_OVERDUE_MAX_application_AMT_CREDIT_PERC',
 'BUREAU_30DAY_AMT_CREDIT_MAX_OVERDUE_MEAN_application_AMT_CREDIT_PERC',
 'BUREAU_30DAY_AMT_CREDIT_MAX_OVERDUE_SUM_application_AMT_CREDIT_PERC',
 'BUREAU_30DAY_AMT_CREDIT_SUM_MAX_application_AMT_CREDIT_PERC',
 'BUREAU_30DAY_AMT_CREDIT_SUM_MEAN_application_AMT_CREDIT_PERC',
 'BUREAU_30DAY_AMT_CREDIT_SUM_SUM_application_AMT_CREDIT_PERC',
 'BUREAU_30DAY_AMT_CREDIT_SUM_STD_application_AMT_CREDIT_PERC',
 'BUREAU_30DAY_AMT_CREDIT_SUM_DEBT_MAX_application_AMT_CREDIT_PERC',
 'BUREAU_30DAY_AMT_CREDIT_SUM_DEBT_MEAN_application_AMT_CREDIT_PERC',
 'BUREAU_30DAY_AMT_CREDIT_SUM_DEBT_SUM_application_AMT_CREDIT_PERC',
 'BUREAU_30DAY_AMT_CREDIT_SUM_DEBT_STD_application_AMT_CREDIT_PERC',
 'BUREAU_30DAY_AMT_CREDIT_SUM_OVERDUE_MAX_application_AMT_CREDIT_PERC',
 'BUREAU_30DAY_AMT_CREDIT_SUM_OVERDUE_MEAN_application_AMT_CREDIT_PERC',
 'BUREAU_30DAY_AMT_CREDIT_SUM_OVERDUE_SUM_application_AMT_CREDIT_PERC',
 'BUREAU_30DAY_AMT_CREDIT_SUM_LIMIT_STD_application_AMT_CREDIT_PERC',
 'BUREAU_90DAY_AMT_CREDIT_SUM_MAX_application_AMT_CREDIT_PERC',
 'BUREAU_90DAY_AMT_CREDIT_SUM_MEAN_application_AMT_CREDIT_PERC',
 'BUREAU_90DAY_AMT_CREDIT_SUM_SUM_application_AMT_CREDIT_PERC',
 'BUREAU_90DAY_AMT_CREDIT_SUM_STD_application_AMT_CREDIT_PERC',
 'BUREAU_90DAY_AMT_CREDIT_SUM_DEBT_MAX_application_AMT_CREDIT_PERC',
 'BUREAU_90DAY_AMT_CREDIT_SUM_DEBT_MEAN_application_AMT_CREDIT_PERC',
 'BUREAU_90DAY_AMT_CREDIT_SUM_DEBT_SUM_application_AMT_CREDIT_PERC',
 'BUREAU_90DAY_AMT_CREDIT_SUM_DEBT_STD_application_AMT_CREDIT_PERC',
 'BUREAU_90DAY_AMT_CREDIT_SUM_OVERDUE_SUM_application_AMT_CREDIT_PERC',
 'BUREAU_120DAY_AMT_CREDIT_SUM_MAX_application_AMT_CREDIT_PERC',
 'BUREAU_120DAY_AMT_CREDIT_SUM_MEAN_application_AMT_CREDIT_PERC',
 'BUREAU_120DAY_AMT_CREDIT_SUM_SUM_application_AMT_CREDIT_PERC',
 'BUREAU_120DAY_AMT_CREDIT_SUM_STD_application_AMT_CREDIT_PERC',
 'BUREAU_120DAY_AMT_CREDIT_SUM_DEBT_MAX_application_AMT_CREDIT_PERC',
 'BUREAU_120DAY_AMT_CREDIT_SUM_DEBT_MEAN_application_AMT_CREDIT_PERC',
 'BUREAU_120DAY_AMT_CREDIT_SUM_DEBT_SUM_application_AMT_CREDIT_PERC',
 'BUREAU_120DAY_AMT_CREDIT_SUM_DEBT_STD_application_AMT_CREDIT_PERC',
 'BUREAU_365DAY_AMT_CREDIT_SUM_STD_application_AMT_CREDIT_PERC',
 'APPROVED_CODE_REJECT_REASON_AMT_CREDIT_MAX_application_AMT_CREDIT_PERC',
 'REFUSED_CODE_REJECT_REASON_AMT_CREDIT_MAX_application_AMT_CREDIT_PERC',
 '30DAY_AMT_CREDIT_FIRST_application_AMT_CREDIT_PERC',
 '30DAY_AMT_CREDIT_SUM_application_AMT_CREDIT_PERC',
 '30DAY_AMT_CREDIT_MAX_application_AMT_CREDIT_PERC',
 '30DAY_AMT_CREDIT_MEAN_application_AMT_CREDIT_PERC',
 '30DAY_CODE_REJECT_REASON_AMT_CREDIT_MEAN_application_AMT_CREDIT_PERC',
 '30DAY_CODE_REJECT_REASON_AMT_CREDIT_MAX_application_AMT_CREDIT_PERC',
 '30DAY_CODE_REJECT_REASON_AMT_CREDIT_STD_application_AMT_CREDIT_PERC',
 '30DAY_NAME_CASH_LOAN_PURPOSE_AMT_CREDIT_MEAN_application_AMT_CREDIT_PERC',
 '30DAY_NAME_CASH_LOAN_PURPOSE_AMT_CREDIT_MAX_application_AMT_CREDIT_PERC',
 '30DAY_NAME_GOODS_CATEGORY_AMT_CREDIT_MEAN_application_AMT_CREDIT_PERC',
 '30DAY_NAME_GOODS_CATEGORY_AMT_CREDIT_MAX_application_AMT_CREDIT_PERC',
 '30DAY_PRODUCT_COMBINATION_AMT_CREDIT_MEAN_application_AMT_CREDIT_PERC',
 '30DAY_PRODUCT_COMBINATION_AMT_CREDIT_MAX_application_AMT_CREDIT_PERC',
 '30DAY_PRODUCT_COMBINATION_AMT_CREDIT_STD_application_AMT_CREDIT_PERC',
 '90DAY_CODE_REJECT_REASON_AMT_CREDIT_STD_application_AMT_CREDIT_PERC',
 '90DAY_NAME_CASH_LOAN_PURPOSE_AMT_CREDIT_STD_application_AMT_CREDIT_PERC',
 '90DAY_NAME_GOODS_CATEGORY_AMT_CREDIT_STD_application_AMT_CREDIT_PERC',
 '90DAY_PRODUCT_COMBINATION_AMT_CREDIT_STD_application_AMT_CREDIT_PERC',
 '120DAY_CODE_REJECT_REASON_AMT_CREDIT_STD_application_AMT_CREDIT_PERC',
 '120DAY_NAME_CASH_LOAN_PURPOSE_AMT_CREDIT_STD_application_AMT_CREDIT_PERC',
 '120DAY_NAME_GOODS_CATEGORY_AMT_CREDIT_STD_application_AMT_CREDIT_PERC',
 '120DAY_PRODUCT_COMBINATION_AMT_CREDIT_STD_application_AMT_CREDIT_PERC',
 'ONEYEAR_CODE_REJECT_REASON_AMT_CREDIT_MEAN_application_AMT_CREDIT_PERC',
 'ONEYEAR_CODE_REJECT_REASON_AMT_CREDIT_MAX_application_AMT_CREDIT_PERC',
 'ONEYEAR_NAME_GOODS_CATEGORY_AMT_CREDIT_STD_application_AMT_CREDIT_PERC',
 'CC_PIVOT_AMT_CREDIT_LIMIT_ACTUAL_MAX_36MON_application_AMT_CREDIT_PERC',
 'CC_PIVOT_AMT_CREDIT_LIMIT_ACTUAL_MAX_ABOVE_application_AMT_CREDIT_PERC',
 'CC_PIVOT_AMT_CREDIT_LIMIT_ACTUAL_MEAN_36MON_application_AMT_CREDIT_PERC',
 'CC_PIVOT_AMT_CREDIT_LIMIT_ACTUAL_MEAN_ABOVE_application_AMT_CREDIT_PERC',
 'CC_PIVOT_AMT_CREDIT_LIMIT_ACTUAL_MIN_36MON_application_AMT_CREDIT_PERC',
 'CC_PIVOT_AMT_CREDIT_LIMIT_ACTUAL_MIN_ABOVE_application_AMT_CREDIT_PERC',
 'CC_PIVOT_AMT_CREDIT_LIMIT_ACTUAL_SUM_36MON_application_AMT_CREDIT_PERC',
 'CC_PIVOT_AMT_CREDIT_LIMIT_ACTUAL_SUM_ABOVE_application_AMT_CREDIT_PERC',
 'BUREAU_CLOSED_ANNUITY_CREDIT_PERC_STD_application_ANNUITY_CREDIT_PERC_PERC',
 'BUREAU_30DAY_ANNUITY_CREDIT_PERC_SUM_application_ANNUITY_CREDIT_PERC_PERC',
 'BUREAU_30DAY_ANNUITY_CREDIT_PERC_STD_application_ANNUITY_CREDIT_PERC_PERC',
 'BUREAU_90DAY_ANNUITY_CREDIT_PERC_SUM_application_ANNUITY_CREDIT_PERC_PERC',
 'BUREAU_90DAY_ANNUITY_CREDIT_PERC_STD_application_ANNUITY_CREDIT_PERC_PERC',
 'BUREAU_120DAY_ANNUITY_CREDIT_PERC_SUM_application_ANNUITY_CREDIT_PERC_PERC',
 'BUREAU_365DAY_ANNUITY_CREDIT_PERC_MAX_application_ANNUITY_CREDIT_PERC_PERC',
 'BUREAU_365DAY_ANNUITY_CREDIT_PERC_MEAN_application_ANNUITY_CREDIT_PERC_PERC',
 'REFUSED_ANNUITY_CREDIT_PERC_STD_application_ANNUITY_CREDIT_PERC_PERC',
 '30DAY_ANNUITY_CREDIT_PERC_MAX_application_ANNUITY_CREDIT_PERC_PERC',
 '30DAY_ANNUITY_CREDIT_PERC_MEAN_application_ANNUITY_CREDIT_PERC_PERC',
 '30DAY_ANNUITY_CREDIT_PERC_SUM_application_ANNUITY_CREDIT_PERC_PERC',
 '90DAY_ANNUITY_CREDIT_PERC_MAX_application_ANNUITY_CREDIT_PERC_PERC',
 '90DAY_ANNUITY_CREDIT_PERC_MEAN_application_ANNUITY_CREDIT_PERC_PERC',
 '90DAY_ANNUITY_CREDIT_PERC_STD_application_ANNUITY_CREDIT_PERC_PERC',
 '120DAY_ANNUITY_CREDIT_PERC_MAX_application_ANNUITY_CREDIT_PERC_PERC',
 '120DAY_ANNUITY_CREDIT_PERC_MEAN_application_ANNUITY_CREDIT_PERC_PERC',
 '120DAY_ANNUITY_CREDIT_PERC_STD_application_ANNUITY_CREDIT_PERC_PERC',
 '30DAY_HOUR_APPR_PROCESS_START_MAX_application_HOUR_APPR_PROCESS_START_PERC',
 '30DAY_HOUR_APPR_PROCESS_START_MEAN_application_HOUR_APPR_PROCESS_START_PERC',
 '30DAY_HOUR_APPR_PROCESS_START_SUM_application_HOUR_APPR_PROCESS_START_PERC',
 'INS_top_1_prev_DAYS_ENTRY_PAYMENT_MIN',
 'INS_top_3_prev_DAYS_ENTRY_PAYMENT_MIN',]


# In[3]:

import pandas as pd
import numpy as np

from sklearn.metrics import roc_auc_score, precision_recall_curve, roc_curve, average_precision_score
from sklearn.model_selection import StratifiedKFold,KFold
import lightgbm as lgb
from datetime import datetime
from tqdm import tqdm
import matplotlib.pyplot as plt
get_ipython().magic(u'matplotlib inline')
import seaborn as sns
import gc
import os
import re


# In[4]:

import warnings
warnings.filterwarnings("ignore")


# In[5]:

debug = False
GLOBAL = False
num_rows = 20000 if debug else None
cache_path = "./cache/v1/"
seed = 1024
path = "../input/"

# In[7]:

def display_importances(feature_importance_df_):
    # Plot feature importances
    cols = feature_importance_df_[["feature", "importance"]].groupby(
        "feature").mean().sort_values(
            by="importance", ascending=False)[:50].index

    best_features = feature_importance_df_.loc[
        feature_importance_df_.feature.isin(cols)]

    plt.figure(figsize=(10, 15))
    sns.barplot(
        x="importance",
        y="feature",
        data=best_features.sort_values(by="importance", ascending=False))
    plt.title('LightGBM Features (avg over folds)')
    plt.tight_layout()
    plt.savefig('../photo/lgbm_importances-01.svg')


# In[8]:

def display_roc_curve(y_, oof_preds_, folds_idx_):
    # Plot ROC curves
    plt.figure(figsize=(6, 6))
    scores = []
    for n_fold, (_, val_idx) in enumerate(folds_idx_):
        # Plot the roc curve
        fpr, tpr, thresholds = roc_curve(y_.iloc[val_idx], oof_preds_[val_idx])
        score = roc_auc_score(y_.iloc[val_idx], oof_preds_[val_idx])
        scores.append(score)
        plt.plot(fpr, tpr, lw=1, alpha=0.3, label='ROC fold %d (AUC = %0.4f)' % (n_fold + 1, score))

    plt.plot([0, 1], [0, 1],linestyle='--',lw=2, color='r',label='Luck', alpha=.8)
    fpr, tpr, thresholds = roc_curve(y_, oof_preds_)
    score = roc_auc_score(y_, oof_preds_)
    plt.plot( fpr,tpr,color='b',label='Avg ROC (AUC = %0.4f $\pm$ %0.4f)' % (score, np.std(scores)),lw=2,alpha=.8)

    plt.xlim([-0.05, 1.05])
    plt.ylim([-0.05, 1.05])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('LightGBM ROC Curve')
    plt.legend(loc="lower right")
    plt.tight_layout()

    plt.savefig('../photo/roc_curve-01.svg')


# In[9]:

def display_precision_recall(y_, oof_preds_, folds_idx_):
    # Plot ROC curves
    plt.figure(figsize=(6, 6))

    scores = []
    for n_fold, (_, val_idx) in enumerate(folds_idx_):
        # Plot the roc curve
        fpr, tpr, thresholds = roc_curve(y_.iloc[val_idx], oof_preds_[val_idx])
        score = average_precision_score(y_.iloc[val_idx], oof_preds_[val_idx])
        scores.append(score)
        plt.plot(fpr,tpr,lw=1,alpha=0.3,label='AP fold %d (APC = %0.4f)' % (n_fold + 1, score))

    precision, recall, thresholds = precision_recall_curve(y_, oof_preds_)
    score = average_precision_score(y_, oof_preds_)
    plt.plot(precision,recall,color='b',label='Avg ROC (APC = %0.4f $\pm$ %0.4f)' % (score, np.std(scores)), lw=2,alpha=.8)

    plt.xlim([-0.05, 1.05])
    plt.ylim([-0.05, 1.05])
    plt.xlabel('Recall')
    plt.ylabel('Precision')
    plt.title('LightGBM Recall / Precision')
    plt.legend(loc="best")
    plt.tight_layout()

    plt.savefig('../photo/recall_precision_curve-01.svg')


# In[10]:

def one_hot_encoder(df, nan_as_category = True):
    original_columns = list(df.columns)
    categorical_columns = [col for col in df.columns if df[col].dtype == 'object']
    df = pd.get_dummies(df, columns= categorical_columns, dummy_na= nan_as_category)
    new_columns = [c for c in df.columns if c not in original_columns]
    return df, new_columns


# In[11]:

def safe_div(a,b):
    try:
        return float(a)/float(b)
    except:
        return 0.0


# In[12]:

def application_train_test(num_rows = None, nan_as_category = True):
     
    df = pd.read_csv(path + 'application_train.csv', nrows= num_rows)
    test_df = pd.read_csv(path+ 'application_test.csv', nrows= num_rows)
    
    df = df.append(test_df).reset_index(drop=True)
    ###############预处理############## 
    df = df[df['CODE_GENDER'] != 'XNA']       
    
    df['DAYS_LAST_PHONE_CHANGE'].replace(0, np.nan, inplace=True)
    df['NAME_FAMILY_STATUS'].replace('Unknown', np.nan, inplace=True)
    df['ORGANIZATION_TYPE'].replace('XNA', np.nan, inplace=True)
    df['DAYS_EMPLOYED'].replace(365243, np.nan, inplace=True)
    
    ###############原始特征##############    
    df['DAYS_EMPLOYED_AGE'] = df['DAYS_EMPLOYED'] / (df['DAYS_BIRTH'])                                     # 在职时间/生日时间
    df['PHONE_TO_BIRTH_PERC'] = df['DAYS_LAST_PHONE_CHANGE'] / (df['DAYS_BIRTH'])                          #变更电话号码/生日时间
    df['PHONE_TO_BIRTH_PERC'] = df['DAYS_LAST_PHONE_CHANGE'] / (df['DAYS_EMPLOYED'])                       #变更号码/在职时间
    df['CAR_TO_BIRTH_PERC'] = df['OWN_CAR_AGE'] / (df['DAYS_BIRTH'] *365 )                                 #车龄/生日
    df['CAR_TO_EMPLOY_PERC'] = df['OWN_CAR_AGE'] / (df['DAYS_EMPLOYED'] )                                  #车龄/在职时间
    df["DAYS_ID_PUBLISH_BIRTH_PERC"] = df["DAYS_ID_PUBLISH"] / (df['DAYS_BIRTH'] )
    df["DAYS_REGISTRATION_EMPLOYED_PERC"] = df["DAYS_REGISTRATION"] / (df['DAYS_EMPLOYED'] )
    
    df['DAYS_REG_TO_BIRTH_PERC'] = df['DAYS_REGISTRATION'] /  (df['DAYS_BIRTH'] )       
    df['DAYS_ID_PUBLISH_TO_EMPLOYED_PERC'] = df['DAYS_ID_PUBLISH'] / (df['DAYS_EMPLOYED'])
    
    df['OBS_30_SC_TO_BIRTH_PERC'] = df['OBS_30_CNT_SOCIAL_CIRCLE'] / (df['DAYS_BIRTH'])
    df['DEF_30_SC_TO_EMPLOY_PERC'] = df['DEF_30_CNT_SOCIAL_CIRCLE'] / (df['DAYS_EMPLOYED'])
    
    df['AMT_REQ_CREDIT_YEAR_TO_BIRTH_PERC'] = df['AMT_REQ_CREDIT_BUREAU_YEAR'] / (df['DAYS_BIRTH'])
    df['AMT_REQ_CREDIT_YEAR_TO_EMPLOY_PERC'] = df['AMT_REQ_CREDIT_BUREAU_YEAR'] / (df['DAYS_EMPLOYED'])
    
    df["DEF_30B60_PERC"] = df["DEF_30_CNT_SOCIAL_CIRCLE"] /(df["DEF_60_CNT_SOCIAL_CIRCLE"])
    df["OBS_30B60_PERC"] = df["OBS_30_CNT_SOCIAL_CIRCLE"] /(df["OBS_60_CNT_SOCIAL_CIRCLE"] )
        
    df['INCOME_CREDIT_PERC'] = df['AMT_INCOME_TOTAL'] / (df['AMT_CREDIT'])                             #客户收入/客户贷款额度
    df['ANNUITY_INCOME_PERC'] = df['AMT_ANNUITY'] / (df['AMT_INCOME_TOTAL'])                           #贷款年金/客户收入
    df['ANNUITY_CREDIT_PERC'] = df['AMT_ANNUITY'] / (df['AMT_CREDIT'] )                                    #贷款年金/信贷额度  
    
    df["BASEMENTAREA_FAM_PERC"] = df["BASEMENTAREA_AVG"] / (df['CNT_FAM_MEMBERS'])                        #人均居住面积
    df["CHILDREN_FAM_PERC"] = df["CNT_CHILDREN"]/ (df['CNT_FAM_MEMBERS'])                                 #孩子占家庭的比重\
    df['INCOME_PER_PERSON'] = df['AMT_INCOME_TOTAL'] / (df['CNT_FAM_MEMBERS'])                         #/客户收入/家庭人数，人均可支配收入
    
    df['EXT_SOURCES_MEAN'] = df[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']].mean(axis=1) #外部数据的均值
    df['EXT_SOURCES_MAX'] = df[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']].max(axis=1) #外部数据的最大
    df['EXT_SOURCES_MIN'] = df[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']].min(axis=1) #外部数据的最小
    df['EXT_SOURCES_PERC'] = df["EXT_SOURCES_MIN"] / df["EXT_SOURCES_MAX"]
    df['EXT_SOURCES_NULL_NUM'] = np.sum(df[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']].isnull(),axis=1) #外部数据的均值
 
    df['SCORES_STD'] = df[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']].std(axis=1)
    df['SCORES_STD'] = df['SCORES_STD'].fillna(df['SCORES_STD'].mean())
    
    df['EXT_SOURCES_MEAN_BIRTH_PERC'] = df['EXT_SOURCES_MEAN'] / (df["DAYS_BIRTH"] +1)
    df['EXT_SOURCES_MEAN_ANNUITY_PERC'] = df['EXT_SOURCES_MEAN'] / (df["AMT_ANNUITY"]+1)
    df['EXT_SOURCES_MEAN_CREDIT_PERC'] = df['EXT_SOURCES_MEAN'] / (df["AMT_CREDIT"]+1)
    
    #####新增
    df['EXT1_AMT_INCOME_TOTAL'] = df['AMT_INCOME_TOTAL'] * df['EXT_SOURCES_MEAN']
    df['EXT1_AMT_GOODS_PRICE'] = df['AMT_GOODS_PRICE'] * df['EXT_SOURCES_MEAN']
    
    df['CREDIT_GOODS_PERC'] = df['AMT_CREDIT'] / (df['AMT_GOODS_PRICE'])  # 信贷/购物价格
    df['CREDIT_PER_PERSON'] = df['AMT_CREDIT'] / df['CNT_FAM_MEMBERS']
    df['CREDIT_PER_CHILD'] = df['AMT_CREDIT'] / (1 + df['CNT_CHILDREN'])
    
    
        
    df["LIVINGAREA_PERC"] = df["LIVINGAREA_AVG"]/(df["NONLIVINGAREA_AVG"])                                  #居住面积和非居住面积比值
    
    docs = [_f for _f in df.columns if 'FLAG_DOC' in _f]
    live = [_f for _f in df.columns if ('FLAG_' in _f) & ('FLAG_DOC' not in _f) & ('_FLAG_' not in _f)]
    df['NEW_DOC_IND_KURT'] = df[docs].kurtosis(axis=1)
    df['NEW_DOC_IND_SKEW'] = df[docs].skew(axis=1)
    df['NEW_DOC_IND_STD'] = df[docs].std(axis=1)
    df['NEW_DOC_IND_MEAN'] = df[docs].mean(axis=1)
    df['NEW_DOC_IND_NULL'] = np.sum(df[docs].isnull(),axis=1)#2018年8月11日23:53:35新增
    
    df['NEW_LIVE_IND_KURT'] = df[live].kurtosis(axis=1)
    df['NEW_LIVE_IND_SKEW'] = df[live].skew(axis=1)
    df['NEW_LIVE_IND_STD'] = df[live].std(axis=1)
    df['NEW_LIVE_IND_MEAN'] = df[live].mean(axis=1)
    df['NEW_LIVE_IND_NULL'] = np.sum(df[live].isnull(),axis=1)#2018年8月11日23:53:27新增 
   
    df["DAYS_BIRTH"] = (df["DAYS_BIRTH"]/-365).astype(int) #转化成年龄
    
    df['REGION_POPULATION_CNT_CHILDREN_MUL'] = df['CNT_CHILDREN'] * df['REGION_POPULATION_RELATIVE']
    df['REGION_POPULATION_CNT_FAM_MEMBERS_MUL'] = df['CNT_FAM_MEMBERS'] * df['REGION_POPULATION_RELATIVE']
    df['CHILDREN_REGION_RATING_MUL'] = df['CNT_CHILDREN'] * df['REGION_RATING_CLIENT']
    df['CHILDREN_REGION_RATING_CLIENT_W_CITY_MUL'] = df['CNT_CHILDREN'] * df['REGION_RATING_CLIENT_W_CITY']
    df['FAMILY_REGION_RATING_MUL'] = df['CNT_FAM_MEMBERS'] * df['REGION_RATING_CLIENT']
    df['FAMILY_REGION_RATING_CLIENT_W_CITY_MUL'] = df['CNT_FAM_MEMBERS'] * df['REGION_RATING_CLIENT_W_CITY']
    
    for bin_feature in ["NAME_EDUCATION_TYPE","ORGANIZATION_TYPE","OCCUPATION_TYPE","NAME_INCOME_TYPE",
                        "NAME_CONTRACT_TYPE"]: #统计不同学历和不同职业的各种统计项:
        for item in ["AMT_INCOME_TOTAL","AMT_CREDIT","AMT_ANNUITY"]:#统计项：年金信贷比，收入信贷比，年金，信贷
            temp = df.groupby(bin_feature)[item].median()
            df[bin_feature+"_"+item] = df[bin_feature].map(temp)            
        
    dropcolum=[ 'FLAG_DOCUMENT_2','FLAG_DOCUMENT_4',
                'FLAG_DOCUMENT_5','FLAG_DOCUMENT_6','FLAG_DOCUMENT_7',
                'FLAG_DOCUMENT_8','FLAG_DOCUMENT_9','FLAG_DOCUMENT_10', 
                'FLAG_DOCUMENT_11','FLAG_DOCUMENT_12','FLAG_DOCUMENT_13',
                'FLAG_DOCUMENT_14','FLAG_DOCUMENT_15','FLAG_DOCUMENT_16',
                'FLAG_DOCUMENT_17','FLAG_DOCUMENT_18','FLAG_DOCUMENT_19',
                'FLAG_DOCUMENT_20','FLAG_DOCUMENT_21',
               
               "AMT_REQ_CREDIT_BUREAU_HOUR","FLAG_EMP_PHONE","FLAG_MOBIL",
               "FLAG_CONT_MOBILE"]
    df= df.drop(dropcolum,axis=1)   
    
    for bin_feature in ['CODE_GENDER', 'FLAG_OWN_CAR', 'FLAG_OWN_REALTY']:
        df[bin_feature], uniques = pd.factorize(df[bin_feature])
    # Categorical features with One-Hot encode
     
    df, cat_cols = one_hot_encoder(df, nan_as_category=False)    
    df.columns = ["application_" + f_ for f_ in df.columns]
    df.rename(columns={"application_SK_ID_CURR":"SK_ID_CURR",
                       "application_TARGET":"TARGET"},inplace=True) 
    
    del test_df
    
    gc.collect()
    return df


# In[13]:

def get_bureau_balance():   
    data = pd.read_csv(path +'bureau_balance.csv')
    data["STATUS"], uniques = pd.factorize(data["STATUS"]) 
    data["MONTHS_BALANCE"] = abs(data["MONTHS_BALANCE"])
    cut_points = [0,2,4,12,24,36]
    cut_points = cut_points + [data["MONTHS_BALANCE"].max()]
    labels = ["2MON","4MON","12MON","24MON","36MON","ABOVE"]
    data["MON_INTERVAL"] = pd.cut(data["MONTHS_BALANCE"], cut_points,labels=labels,include_lowest=True)
    feature = pd.pivot_table(data,index=["SK_ID_BUREAU"],columns=["MON_INTERVAL"],values=["STATUS"],aggfunc=[np.max,np.mean,np.std]).astype('float32')
    feature.columns = ["_".join(f_).upper() for f_ in feature.columns]
    
    bb_agg = data.groupby('SK_ID_BUREAU').agg({'MONTHS_BALANCE': ['min', 'max', 'size']}).astype('float32')
    bb_agg.columns = pd.Index([e[0] + "_" + e[1].upper() for e in bb_agg.columns.tolist()])
    feature = pd.merge(feature,bb_agg,how="left",left_index=True,right_index=True)
    return feature, feature.columns.tolist()


# In[14]:

def bureau_and_balance(feature):
    data = pd.read_csv(path + 'bureau.csv')
    ###############预处理############## 
    data.loc[data['DAYS_CREDIT_ENDDATE'] < -40000, 'DAYS_CREDIT_ENDDATE'] = np.nan
    data.loc[data['DAYS_CREDIT_UPDATE'] < -40000, 'DAYS_CREDIT_UPDATE'] = np.nan
    data.loc[data['DAYS_ENDDATE_FACT'] < -40000, 'DAYS_ENDDATE_FACT'] = np.nan
    
    df , bureau_cat = get_bureau_balance()
    data = pd.merge(data, df, left_on="SK_ID_BUREAU",right_index=True,how="left")
    del data["SK_ID_BUREAU"],data["CREDIT_CURRENCY"]
    
    temp = data.groupby("CREDIT_TYPE")["AMT_ANNUITY"].mean()
    data["CREDIT_TYPE_AMT_ANNUITY"] = data["CREDIT_TYPE"].map(temp)#2018年8月14日14:25:57修改
    
    data, cat_cols  = one_hot_encoder(data)
    
    data['CREDICT_SUM_LEFT'] = data['AMT_CREDIT_SUM']-data['AMT_CREDIT_SUM_DEBT']-data['AMT_CREDIT_SUM_LIMIT'] # 信用余额
    data['DAYS_CREDIT_LAST'] = data['DAYS_CREDIT_ENDDATE']-data['CREDIT_DAY_OVERDUE']  # 贷款持续时长
    data['DAYS_CREDIT_EARLY']  = data['DAYS_CREDIT_ENDDATE']- data['DAYS_ENDDATE_FACT']  # 提前还款天数
    
    data['CREDICT_SUM_DEBT_PERC'] =data['AMT_CREDIT_SUM_DEBT']/ data['AMT_CREDIT_SUM']
    data['CREDICT_SUM_LIMIT_PERC'] =data['AMT_CREDIT_SUM_LIMIT']/ data['AMT_CREDIT_SUM']
    data['CREDICT_SUM_OVERDUE_PERC'] =data['AMT_CREDIT_SUM_OVERDUE']/ data['AMT_CREDIT_SUM']
    data['ANNUITY_CREDIT_PERC'] = data['AMT_ANNUITY'] / data['DAYS_CREDIT']
    data['ANNUITY_CREDIT_SUM_PERC'] = data['AMT_ANNUITY'] / data['AMT_CREDIT_SUM']
    
    num_aggregations = {
    'DAYS_CREDIT': [ 'max','mean','sum',"std"],
    'DAYS_CREDIT_ENDDATE':[ 'max','mean','sum',"std"],
    'DAYS_CREDIT_UPDATE': [ 'max','mean','sum',"std"], 
    'CREDIT_DAY_OVERDUE':[ 'max','mean','sum',"std"], 
    'AMT_CREDIT_MAX_OVERDUE':[ 'max','mean','sum',"std"],
    'AMT_CREDIT_SUM': [ 'max','mean','sum',"std"],  
    'AMT_CREDIT_SUM_DEBT':[ 'max','mean','sum',"std"],
    'AMT_CREDIT_SUM_OVERDUE':[ 'max','mean','sum',"std"],
    'AMT_CREDIT_SUM_LIMIT':[ 'max','mean','sum',"std"],  
    'AMT_ANNUITY': ["first","sum",'max','mean'],     
    'CNT_CREDIT_PROLONG': ['sum'],
    'MONTHS_BALANCE_MIN': ['min'],
    'MONTHS_BALANCE_MAX': ['max'],
    'MONTHS_BALANCE_SIZE': ['mean', 'sum'],
  
    # new feature 1
    'CREDICT_SUM_LEFT':[ 'max','mean','sum',"std"],
    'DAYS_CREDIT_LAST': [ 'max','mean','sum',"std"],
    'DAYS_CREDIT_EARLY':[ 'max','mean','sum',"std"],
    'CREDIT_TYPE_AMT_ANNUITY':['mean',"std"],
        
    'CREDICT_SUM_DEBT_PERC':[ 'max','mean','sum',"std"],
    'CREDICT_SUM_LIMIT_PERC':[ 'max','mean','sum',"std"],
    'CREDICT_SUM_OVERDUE_PERC':[ 'max','mean','sum',"std"],
    #新增特征2018年8月11日21:34:11
    'ANNUITY_CREDIT_PERC':[ 'max','mean','sum',"std"],
    'ANNUITY_CREDIT_SUM_PERC':[ 'max','mean','sum',"std"],
    }

    cat_aggregations = {}
    for cat in bureau_cat: cat_aggregations[cat] = ['mean']
    for cat in cat_cols: cat_aggregations[cat] = ['mean']

    result = data.groupby('SK_ID_CURR').agg(dict(num_aggregations, **cat_aggregations)).astype('float32')
    result.columns = ["".join(_f) for _f in result.columns]
    
    active = data[data['CREDIT_ACTIVE_Active'] == 1]
    active_agg = active.groupby('SK_ID_CURR').agg(num_aggregations).astype('float32')
    active_agg.columns = pd.Index(['ACTIVE_' + e[0] + "_" + e[1].upper() for e in active_agg.columns.tolist()])    
    result = pd.merge(result,active_agg,right_index=True,left_index=True,how="left")
        
    closed = data[data['CREDIT_ACTIVE_Closed'] == 1]
    closed_agg = closed.groupby('SK_ID_CURR').agg(num_aggregations).astype('float32')
    closed_agg.columns = pd.Index(['CLOSED_' + e[0] + "_" + e[1].upper() for e in closed_agg.columns.tolist()])
    result = pd.merge(result,closed_agg,right_index=True,left_index=True,how="left")
    
    lastdate = data[data['DAYS_CREDIT'] >-30]
    lastdate_agg = lastdate.groupby('SK_ID_CURR').agg(num_aggregations).astype('float32')
    lastdate_agg.columns = pd.Index(['30DAY_' + e[0] + "_" + e[1].upper() for e in lastdate_agg.columns.tolist()])
    result = pd.merge(result,lastdate_agg,right_index=True,left_index=True,how="left")
    
    lastdate = data[data['DAYS_CREDIT'] >-90]
    lastdate_agg = lastdate.groupby('SK_ID_CURR').agg(num_aggregations).astype('float32')
    lastdate_agg.columns = pd.Index(['90DAY_' + e[0] + "_" + e[1].upper() for e in lastdate_agg.columns.tolist()])
    result = pd.merge(result,lastdate_agg,right_index=True,left_index=True,how="left")
    
    lastdate = data[data['DAYS_CREDIT'] >-120]
    lastdate_agg = lastdate.groupby('SK_ID_CURR').agg(num_aggregations).astype('float32')
    lastdate_agg.columns = pd.Index(['120DAY_' + e[0] + "_" + e[1].upper() for e in lastdate_agg.columns.tolist()])
    result = pd.merge(result,lastdate_agg,right_index=True,left_index=True,how="left")
  
    lastdate = data[data['DAYS_CREDIT'] >-365]
    lastdate_agg = lastdate.groupby('SK_ID_CURR').agg(num_aggregations).astype('float32')
    lastdate_agg.columns = pd.Index(['365DAY_' + e[0] + "_" + e[1].upper() for e in lastdate_agg.columns.tolist()])
    result = pd.merge(result,lastdate_agg,right_index=True,left_index=True,how="left")
             
    result.columns = ["BUREAU_"+_f for _f in result.columns]    
    feature = pd.merge(feature,result.reset_index(),on="SK_ID_CURR",how="left")
    return feature    


# In[15]:

def previous_applications(feature):
    prev = pd.read_csv(path + 'previous_application.csv')
    ins_target = pd.read_csv(path + "INS_TARGET.csv")
    ins_target = ins_target.groupby(["SK_ID_PREV"],as_index=False)["DPD_BOOL"].mean()
    cc_target = pd.read_csv(path + "CC_TARGET.csv")
    cc_target = cc_target.groupby(["SK_ID_PREV"],as_index=False)["SK_DPD_DIFF"].mean()
    pos_target = pd.read_csv(path + "P0S_TARGET.csv")
    pos_target = pos_target.groupby(["SK_ID_PREV"],as_index=False)["POS_TARGET"].mean()
    
    prev = pd.merge(prev,ins_target,on="SK_ID_PREV",how='left')
    prev = pd.merge(prev,cc_target,on="SK_ID_PREV",how='left')
    prev = pd.merge(prev,pos_target,on="SK_ID_PREV",how='left')
    
    prev['DAYS_FIRST_DRAWING'].replace(365243, np.nan, inplace= True)
    prev['DAYS_FIRST_DUE'].replace(365243, np.nan, inplace= True)
    prev['DAYS_LAST_DUE_1ST_VERSION'].replace(365243, np.nan, inplace= True)
    prev['DAYS_LAST_DUE'].replace(365243, np.nan, inplace= True)
    prev['DAYS_TERMINATION'].replace(365243, np.nan, inplace= True)
    # Add feature: value ask / value received percentage
    prev['APP_CREDIT_PERC'] = prev['AMT_APPLICATION'] / (prev['AMT_CREDIT'] + 1)
    prev['APP_COODS_PERC'] = prev['AMT_APPLICATION'] / (prev['AMT_GOODS_PRICE'] + 1)
    prev['ANNUITY_CREDIT_PERC'] = prev['AMT_ANNUITY'] / (prev['AMT_CREDIT'] + 1 ) 
    prev['GOODS_PRICE_CREDIT_PERC'] = prev['AMT_CREDIT'] / (prev['AMT_GOODS_PRICE'] + 1 )  
    
    num_aggregations = {
        'AMT_ANNUITY': ["first","sum", 'max', 'mean',],
        'AMT_APPLICATION': [ 'max','mean','sum',"std"],
        'AMT_CREDIT': ["first","sum", 'max', 'mean',],
        'APP_CREDIT_PERC': [ 'max', 'mean','sum',"std"],
        'ANNUITY_CREDIT_PERC': [ 'max', 'mean','sum',"std"],
        'GOODS_PRICE_CREDIT_PERC': [ 'max', 'mean','sum',"std"],
        
        'AMT_DOWN_PAYMENT': [ 'max', 'mean','sum',"std"],
        'AMT_GOODS_PRICE': ["first","std", 'max', 'mean',"sum"],
        'HOUR_APPR_PROCESS_START': [ 'max', 'mean',"sum"],
        'RATE_DOWN_PAYMENT': ['mean', 'sum',"std"],
        'DAYS_DECISION':['mean', 'sum',"std"],
        'CNT_PAYMENT': ['mean', 'sum',"std"],
        'APP_COODS_PERC': ['mean', 'sum',"std"],
    }
    
    for bin_feature in ["CODE_REJECT_REASON", "NAME_CASH_LOAN_PURPOSE","NAME_GOODS_CATEGORY","PRODUCT_COMBINATION"]: 
        for item in ["AMT_ANNUITY","AMT_APPLICATION","AMT_CREDIT","AMT_DOWN_PAYMENT","DPD_BOOL","SK_DPD_DIFF","POS_TARGET"]:
            temp = prev.groupby(bin_feature)[item].mean()
            prev[bin_feature+"_"+item] = prev[bin_feature].map(temp).astype('float32')
            num_aggregations[bin_feature+"_"+item] = ['mean','max',"std"]
         
    prev, cat_cols = one_hot_encoder(prev, nan_as_category= False)  
      
    
    cat_aggregations = {}
    for cat in cat_cols:
        cat_aggregations[cat] = ['mean']
    
    prev_agg = prev.groupby('SK_ID_CURR').agg(dict(num_aggregations, **cat_aggregations)).astype('float32')
    prev_agg.columns = pd.Index(['PREV_' + e[0] + "_" + e[1].upper() for e in prev_agg.columns.tolist()])
    
    approved = prev[prev['NAME_CONTRACT_STATUS_Approved'] == 1]
    approved_agg = approved.groupby('SK_ID_CURR').agg(num_aggregations).astype('float32')
    approved_agg.columns = pd.Index(['APPROVED_' + e[0] + "_" + e[1].upper() for e in approved_agg.columns.tolist()])
    prev_agg = pd.merge(prev_agg,approved_agg,right_index=True,left_index=True,how="left")
    
    refused = prev[prev['NAME_CONTRACT_STATUS_Refused'] == 1]
    refused_agg = refused.groupby('SK_ID_CURR').agg(num_aggregations).astype('float32')
    refused_agg.columns = pd.Index(['REFUSED_' + e[0] + "_" + e[1].upper() for e in refused_agg.columns.tolist()])
    prev_agg = pd.merge(prev_agg,refused_agg,right_index=True,left_index=True,how="left")
    
    lastdate = prev[prev['DAYS_DECISION'] >=-30] #最近1个月的情况
    lastdate_agg = lastdate.groupby('SK_ID_CURR').agg(num_aggregations).astype('float32')
    lastdate_agg.columns = pd.Index(['30DAY_' + e[0] + "_" + e[1].upper() for e in lastdate_agg.columns.tolist()])
    prev_agg = pd.merge(prev_agg,lastdate_agg,right_index=True,left_index=True,how="left")
    
    lastdate = prev[prev['DAYS_DECISION'] >=-90] #最近1个月的情况
    lastdate_agg = lastdate.groupby('SK_ID_CURR').agg(num_aggregations).astype('float32')
    lastdate_agg.columns = pd.Index(['90DAY_' + e[0] + "_" + e[1].upper() for e in lastdate_agg.columns.tolist()])
    prev_agg = pd.merge(prev_agg,lastdate_agg,right_index=True,left_index=True,how="left")

    lastdate = prev[prev['DAYS_DECISION'] >=-120] #最近1季度的情况
    lastdate_agg = lastdate.groupby('SK_ID_CURR').agg(num_aggregations).astype('float32')
    lastdate_agg.columns = pd.Index(['120DAY_' + e[0] + "_" + e[1].upper() for e in lastdate_agg.columns.tolist()])
    prev_agg = pd.merge(prev_agg,lastdate_agg,right_index=True,left_index=True,how="left")
        
    lastdate = approved[approved['DAYS_DECISION'] >=-365] #最近1年的激活数据的统计，2018年8月12日修改
    lastdate_agg = lastdate.groupby('SK_ID_CURR').agg(num_aggregations).astype('float32')
    lastdate_agg.columns = pd.Index(['ONEYEAR_' + e[0] + "_" + e[1].upper() for e in lastdate_agg.columns.tolist()])
    prev_agg = pd.merge(prev_agg,lastdate_agg,right_index=True,left_index=True,how="left")
    
    del refused, refused_agg, approved, approved_agg, prev,lastdate_agg,lastdate
          
    feature = pd.merge(feature,prev_agg.reset_index(),on="SK_ID_CURR",how="left")
    return feature


# In[16]:

def pos_cash(feature):
    pos = pd.read_csv(path + 'POS_CASH_balance.csv')
    pos, cat_cols = one_hot_encoder(pos, nan_as_category= True)
    # Features
    pos["MONTHS_BALANCE"] = abs(pos["MONTHS_BALANCE"])
    cut_points = [0,2,4,12,24,36]
    cut_points = cut_points + [pos["MONTHS_BALANCE"].max()]
    labels = ["2MON","4MON","12MON","24MON","36MON","ABOVE"]
    pos["MON_INTERVAL"] = pd.cut(pos["MONTHS_BALANCE"], cut_points,labels=labels,include_lowest=True)   
    
    pos["SK_DPD_DIFF"] = pos.SK_DPD - pos.SK_DPD_DEF
       
    aggregations = {
        'MONTHS_BALANCE': ['max', 'mean'],
        'SK_DPD': ['max', 'mean', 'sum',"std"], 
        'SK_DPD_DEF': ['max', 'mean', 'sum',"std"],        
        "SK_DPD_DIFF":['max', 'mean', 'sum',"first","last"], 
        'CNT_INSTALMENT': ['std', 'mean',"max","min"],
        'CNT_INSTALMENT_FUTURE': ['std', 'mean',"max","min"],
      
    }
    for cat in cat_cols:
        aggregations[cat] = ['mean']
    
    pos_agg = pd.pivot_table(pos,index=["SK_ID_CURR"],columns=["MON_INTERVAL"],aggfunc=aggregations).astype('float32')
    pos_agg.columns = ["POS_"+"_".join(f_).upper() for f_ in pos_agg.columns]
    feature = pd.merge(feature,pos_agg.reset_index(),on="SK_ID_CURR",how="left")   
    
    pos_agg = pos.groupby('SK_ID_CURR').agg(aggregations).astype('float32')
    pos_agg.columns = pd.Index(['POS_TOTAL' + e[0] + "_" + e[1].upper() for e in pos_agg.columns.tolist()])
    # Count pos cash accounts
    pos_agg['POS_COUNT'] = pos.groupby('SK_ID_CURR').size()
        
    feature = pd.merge(feature,pos_agg.reset_index(),on="SK_ID_CURR",how="left")
    return feature


# In[17]:

def installments_payments(feature):
    ins = pd.read_csv(path + 'installments_payments.csv')
    ins = ins.sort_values(["SK_ID_CURR","DAYS_INSTALMENT"],ascending=False)
    ins, cat_cols = one_hot_encoder(ins, nan_as_category= True)
    # Percentage and difference paid in each installment (amount paid and installment value)
    ins['PAYMENT_PERC'] = ins['AMT_INSTALMENT'] / ins['AMT_PAYMENT']
    ins['PAYMENT_DIFF'] = ins['AMT_INSTALMENT'] - ins['AMT_PAYMENT']
    # Days past due and days before due (no negative values)
    ins['DPD'] = ins['DAYS_ENTRY_PAYMENT'] - ins['DAYS_INSTALMENT']
    ins['DPD_BOOL'] = ins['DPD'].apply(lambda x: x if x > 0 else 0)
    ins['AMT_PAYMENT_DPD_PERC'] = ins["AMT_PAYMENT"] / ins["DPD"] #2018年8月12日22:25:59新增
    ins['PAYMENT_DIFF_DPD_PRODUCT'] = ins["PAYMENT_DIFF"] * ins["DPD"] / 30 #2018年8月12日22:25:59新增
         
    # Features: Perform aggregations
    aggregations = {
        'NUM_INSTALMENT_VERSION': ['nunique',"size"],
        'DPD': ['max', 'mean', 'sum','min','std' ],
        'DPD_BOOL': ['max', 'mean', 'sum','first','last','std'],
        'PAYMENT_PERC': [ 'max','mean','min','std'],
        'PAYMENT_DIFF': [ 'max','mean','min','std'],
        'AMT_INSTALMENT': ['max', 'mean', 'sum','min','std'],
        'AMT_PAYMENT': ['min', 'max', 'mean', 'sum','std'],
        'DAYS_ENTRY_PAYMENT': ['max', 'mean', 'sum','std'],
        
        'AMT_PAYMENT_DPD_PERC': ['max', 'mean', 'sum','std'] ,
        'PAYMENT_DIFF_DPD_PRODUCT': ['max', 'mean', 'sum','std'] 
    }    
    for cat in cat_cols:
        aggregations[cat] = ['mean']
        
    ins_agg = ins.groupby('SK_ID_CURR').agg(aggregations).astype('float32')
    ins_agg.columns = pd.Index(['INSTAL_' + e[0] + "_" + e[1].upper() for e in ins_agg.columns.tolist()])
    ins_agg['INSTAL_COUNT'] = ins.groupby('SK_ID_CURR').size()
    
    lastdate = ins[ins['DAYS_INSTALMENT'] >=-30] #最近1个月的情况
    lastdate_agg = lastdate.groupby('SK_ID_CURR').agg(aggregations).astype('float32')
    lastdate_agg.columns = pd.Index(['INSTAL_30DAY_' + e[0] + "_" + e[1].upper() for e in lastdate_agg.columns.tolist()])
    ins_agg = pd.merge(ins_agg,lastdate_agg,right_index=True,left_index=True,how="left")
    
    lastdate = ins[ins['DAYS_INSTALMENT'] >=-90] #最近1个月的情况
    lastdate_agg = lastdate.groupby('SK_ID_CURR').agg(aggregations).astype('float32')
    lastdate_agg.columns = pd.Index(['INSTAL_90DAY_' + e[0] + "_" + e[1].upper() for e in lastdate_agg.columns.tolist()])
    ins_agg = pd.merge(ins_agg,lastdate_agg,right_index=True,left_index=True,how="left")
    
    lastdate = ins[ins['DAYS_INSTALMENT'] >=-120] #最近1季度的情况
    lastdate_agg = lastdate.groupby('SK_ID_CURR').agg(aggregations).astype('float32')
    lastdate_agg.columns = pd.Index(['INSTAL_120DAY_' + e[0] + "_" + e[1].upper() for e in lastdate_agg.columns.tolist()])
    ins_agg = pd.merge(ins_agg,lastdate_agg,right_index=True,left_index=True,how="left")
        
    lastdate = ins[ins['DAYS_INSTALMENT'] >=-365] #最近1年的情况
    lastdate_agg = lastdate.groupby('SK_ID_CURR').agg(aggregations).astype('float32')
    lastdate_agg.columns = pd.Index(['INSTAL_365DAY_' + e[0] + "_" + e[1].upper() for e in lastdate_agg.columns.tolist()])
    ins_agg = pd.merge(ins_agg,lastdate_agg,right_index=True,left_index=True,how="left")
    
    lastdate = ins.groupby(["SK_ID_CURR"]).head(3)#最近的3次消费
    lastdate_agg = lastdate.groupby('SK_ID_CURR').agg(aggregations).astype('float32')
    lastdate_agg.columns = pd.Index(['INSTAL_3TIMES_' + e[0] + "_" + e[1].upper() for e in lastdate_agg.columns.tolist()])
    ins_agg = pd.merge(ins_agg,lastdate_agg,right_index=True,left_index=True,how="left")
         
    lastdate = ins.groupby(["SK_ID_CURR"]).head(10)#最近的10次消费
    lastdate_agg = lastdate.groupby('SK_ID_CURR').agg(aggregations).astype('float32')
    lastdate_agg.columns = pd.Index(['INSTAL_10TIMES_' + e[0] + "_" + e[1].upper() for e in lastdate_agg.columns.tolist()])
    ins_agg = pd.merge(ins_agg,lastdate_agg,right_index=True,left_index=True,how="left")
    
    feature = pd.merge(feature,ins_agg.reset_index(),on="SK_ID_CURR",how="left") 
    
    #####相同SK_ID_PREV下，AMT_PAYMENT的统计特征
    df = ins[["SK_ID_CURR","SK_ID_PREV","AMT_PAYMENT","DAYS_INSTALMENT"]]
    temp = df.copy()
    temp = temp.diff()
    temp = temp[temp.SK_ID_PREV == 0]
    df = pd.concat([df[["SK_ID_CURR"]],temp[["AMT_PAYMENT"]]],axis=1)    
    diff_agg = df.groupby('SK_ID_CURR').agg({'AMT_PAYMENT':['max',"min","std"]})
    diff_agg.columns = pd.Index(['INS_DIFF_PREV_' + e[0] + "_" + e[1].upper() for e in diff_agg.columns.tolist()])   
    feature = pd.merge(feature,diff_agg.reset_index(),on="SK_ID_CURR",how="left")
    #####不考虑SK_ID_PREV下，AMT_PAYMENT的统计特征
    df = ins[["SK_ID_CURR","SK_ID_PREV","AMT_PAYMENT","DAYS_INSTALMENT"]]
    temp = df.copy()
    temp = temp.diff()
    temp = temp[temp.SK_ID_CURR == 0]
    df = pd.concat([df[["SK_ID_CURR"]],temp[["AMT_PAYMENT"]]],axis=1)    
    diff_agg = df.groupby('SK_ID_CURR').agg({'AMT_PAYMENT':['max',"min","std"]})
    diff_agg.columns = pd.Index(['INS_DIFF_CURR_' + e[0] + "_" + e[1].upper() for e in diff_agg.columns.tolist()])   
    feature = pd.merge(feature,diff_agg.reset_index(),on="SK_ID_CURR",how="left")    
    return feature


# In[18]:

def credit_card_balance(feature):
    cc = pd.read_csv(path + 'credit_card_balance.csv')
    ###############预处理############## 
    cc.loc[cc['AMT_DRAWINGS_ATM_CURRENT'] < 0, 'AMT_DRAWINGS_ATM_CURRENT'] = np.nan
    cc.loc[cc['AMT_DRAWINGS_CURRENT'] < 0, 'AMT_DRAWINGS_CURRENT'] = np.nan
        
    cc, cat_cols = one_hot_encoder(cc, nan_as_category= False)
    cc.drop(['SK_ID_PREV'], axis= 1, inplace = True)

    cc["MONTHS_BALANCE"] = abs(cc["MONTHS_BALANCE"])
    cut_points = [0,2,4,12,24,36]
    cut_points = cut_points + [cc["MONTHS_BALANCE"].max()]
    labels = ["2MON","4MON","12MON","24MON",'36MON',"ABOVE"]
    cc["MON_INTERVAL"] = pd.cut(cc["MONTHS_BALANCE"], cut_points,labels=labels,include_lowest=True)

    cc["SK_DPD_DIFF"] = cc.SK_DPD - cc.SK_DPD_DEF # 历史剩余逾期天数
    cc["AMT_PAYMENT_MIN_REGULARITY_PERC"] = cc["AMT_INST_MIN_REGULARITY"]/cc["AMT_PAYMENT_CURRENT"] #是否足额还贷款
    cc["DRAWINGS_ATM_PERC"] = cc["AMT_DRAWINGS_ATM_CURRENT"]/cc["CNT_DRAWINGS_ATM_CURRENT"]  #atm平均单笔提款额度
    cc["DRAWING_PERC"] = cc["AMT_DRAWINGS_CURRENT"] / cc["CNT_DRAWINGS_CURRENT"] #平均单笔提款额
    cc["DRAWINGS_OTHER_PERC"] = cc["AMT_DRAWINGS_OTHER_CURRENT"] / cc["CNT_DRAWINGS_OTHER_CURRENT"] #平均单笔提款额
    cc["DRAWINGS_POS_PERC"] = cc["AMT_DRAWINGS_POS_CURRENT"] / cc["CNT_DRAWINGS_POS_CURRENT"] #平均单笔提款额
    cc["PAYMENT_INSTALMENT_PERC"] = cc["AMT_PAYMENT_TOTAL_CURRENT"] / cc["CNT_INSTALMENT_MATURE_CUM"] #平均单笔提款额
    
    # new feature 1
    cc['AMT_DRAWINGS_ATM_PER'] = cc['AMT_DRAWINGS_ATM_CURRENT'] / cc['AMT_DRAWINGS_CURRENT']  # ATM取款额 / 总取款额
    cc['CNT_DRAWINGS_ATM_PER'] = cc['CNT_DRAWINGS_ATM_CURRENT'] / cc['CNT_DRAWINGS_CURRENT']  # ATM取款次数 / 总取款次数
    cc['AMT_DRAWINGS_POS_CURRENT_PER'] = cc['AMT_DRAWINGS_POS_CURRENT'] / cc['CNT_DRAWINGS_ATM_CURRENT'] # 购买商品取款额 / 总取款额
    cc['CNT_DRAWINGS_POS_AVG'] = cc['AMT_DRAWINGS_POS_CURRENT'] / cc['CNT_DRAWINGS_POS_CURRENT']  # 购买商品取款额 / 购买商品次数
    cc['AMT_RECIVABLE_BALANCE'] = cc['AMT_RECIVABLE'] - cc['AMT_RECEIVABLE_PRINCIPAL']  # 应收金额 - 应收本金 = 利息？
    cc['AMT_RECIVABLE_PER'] = cc['AMT_RECIVABLE'] / cc['AMT_TOTAL_RECEIVABLE']  # 应收金额 / 应收总额
   
    aggregations = {
        'MONTHS_BALANCE': ["min",'max'],    
        'AMT_BALANCE': ['max', 'mean', 'sum',"std"],  
        'AMT_CREDIT_LIMIT_ACTUAL': ['max', 'mean', 'sum',"min"],  
        'AMT_DRAWINGS_ATM_CURRENT': ['max', 'mean', 'sum'], 
        'AMT_DRAWINGS_CURRENT': ['max', 'mean', 'sum',"std"], 
        'AMT_DRAWINGS_OTHER_CURRENT': ['max', 'mean', 'sum',"std"], 
        'AMT_DRAWINGS_POS_CURRENT': ['max', 'mean', 'sum',"std"], 
        'AMT_INST_MIN_REGULARITY': ['max', 'mean', 'sum',"std"], 
        'AMT_PAYMENT_CURRENT': ['std', 'max', 'mean', 'sum'],
        'AMT_PAYMENT_TOTAL_CURRENT': ['max', 'mean', 'sum',"std"],         
        'AMT_RECEIVABLE_PRINCIPAL': ["std",'max', 'mean', 'sum'],  
        'AMT_RECIVABLE': ["std",'max', 'mean', 'sum'],  
        'AMT_TOTAL_RECEIVABLE': ["std",'max', 'mean', 'sum'],
        'CNT_DRAWINGS_CURRENT': ['max', 'mean', 'sum',"std"],  
        'CNT_DRAWINGS_OTHER_CURRENT': ['max', 'mean', 'sum',"std"],  
        'CNT_DRAWINGS_POS_CURRENT': ['max', 'mean', 'sum',"std"],  
        'CNT_INSTALMENT_MATURE_CUM': ['max', 'mean', 'sum',"std"],       
        'SK_DPD': ['max', 'mean', 'sum',"std"], 
        'SK_DPD_DEF': ['max', 'mean', 'sum',"std"], 

        "SK_DPD_DIFF":['first','max', 'mean','sum'], #逾期情况，最近和最早的逾期情况
        "AMT_PAYMENT_MIN_REGULARITY_PERC":["min",'max', 'mean', 'sum'],
        "DRAWING_PERC":["min",'max', 'mean', 'sum'],
        "DRAWINGS_ATM_PERC":['max', 'mean', 'sum',"std"],
        "DRAWINGS_OTHER_PERC":['max', 'mean', 'sum',"std"],
        "DRAWINGS_POS_PERC":['max', 'mean', 'sum',"std"],
        "PAYMENT_INSTALMENT_PERC":['max', 'mean', 'sum',"std"],
        
        # new feature 1
        'AMT_DRAWINGS_ATM_PER': ['max', 'mean', 'std'],
        'CNT_DRAWINGS_ATM_PER':  ['max', 'mean', 'std'],
        'AMT_DRAWINGS_POS_CURRENT_PER': ['max', 'mean', 'std'],
        'CNT_DRAWINGS_POS_AVG':  ['max', 'mean', 'std'],
        'AMT_RECIVABLE_BALANCE':  ['max', 'mean', 'std'],
        'AMT_RECIVABLE_PER':  ['max', 'mean', 'std'],    
    } 
    cat_aggregations = {}
    for cat in cat_cols:
        cat_aggregations[cat] = ['mean']  
    
    cc_agg = pd.pivot_table(cc,index=["SK_ID_CURR"],columns=["MON_INTERVAL"],aggfunc=aggregations).astype('float32')
    cc_agg.columns = ["CC_PIVOT_"+"_".join(f_).upper() for f_ in cc_agg.columns]
    cc_agg['CC_COUNT'] = cc.groupby('SK_ID_CURR').size()
    feature = pd.merge(feature,cc_agg.reset_index(),on="SK_ID_CURR",how="left")
    
    cc_agg = cc.groupby('SK_ID_CURR').agg(aggregations).astype('float32')
    cc_agg.columns = pd.Index(['CC_TOTAL_' + e[0] + "_" + e[1].upper() for e in cc_agg.columns.tolist()])
    feature = pd.merge(feature,cc_agg.reset_index(),on="SK_ID_CURR",how="left")   
    return feature


# In[19]:

def association_perc(feature):
    amt_annuity = [_f for _f in feature.columns if 'AMT_ANNUITY' in _f and "application_AMT_ANNUITY" not in _f]
    amt_goods_price = [_f for _f in feature.columns if 'AMT_GOODS_PRICE' in _f and "application_AMT_GOODS_PRICE" not in _f]
    amt_credit = [_f for _f in feature.columns if 'AMT_CREDIT' in _f and "application_AMT_CREDIT" not in _f]
    annuity_credit_perc = [_f for _f in feature.columns if 'ANNUITY_CREDIT_PERC' in _f and "application_ANNUITY_CREDIT_PERC" not in _f]
    appr_process_start = [_f for _f in feature.columns if 'HOUR_APPR_PROCESS_START' in _f and "application_HOUR_APPR_PROCESS_START" not in _f]
            
    for f_ in amt_annuity[1:]:
        feature[f_ + "_application_AMT_ANNUITY_PERC"] = (feature[f_] / feature["application_AMT_ANNUITY"]).astype('float32')
    for f_ in amt_goods_price[1:]:
        feature[f_ + "_application_AMT_GOODS_PRICE_PERC"] = (feature[f_] / feature["application_AMT_GOODS_PRICE"]).astype('float32')       
    for f_ in amt_credit[1:]:
        feature[f_ + "_application_AMT_CREDIT_PERC"] = (feature[f_] / feature["application_AMT_CREDIT"]).astype('float32')
    for f_ in annuity_credit_perc[1:]:
        feature[f_ + "_application_ANNUITY_CREDIT_PERC_PERC"] = (feature[f_] / feature["application_ANNUITY_CREDIT_PERC"]).astype('float32')   
    for f_ in appr_process_start[1:]:
        feature[f_ + "_application_HOUR_APPR_PROCESS_START_PERC"] = (feature[f_] / feature["application_HOUR_APPR_PROCESS_START"]).astype('float32')      
    
    feature["POS_CNT_INSTALMENT_FUTURE_1MON3MON_PERC"] = feature["POS_CNT_INSTALMENT_FUTURE_MEAN_2MON"] / feature["POS_CNT_INSTALMENT_FUTURE_MEAN_4MON"]
    feature["POS_CNT_INSTALMENT_FUTURE_3MON12MON_PERC"] = feature["POS_CNT_INSTALMENT_FUTURE_MEAN_4MON"] / feature["POS_CNT_INSTALMENT_FUTURE_MEAN_12MON"]
    feature["INSTAL_DPD_BOOL_120d365DAY_PERC"] = feature["INSTAL_120DAY_DPD_BOOL_MEAN"] /  feature["INSTAL_365DAY_DPD_BOOL_MEAN"] 
    feature["INSTAL_DPD_120d365_PERC"] = feature["INSTAL_120DAY_DPD_MAX"] /  feature["INSTAL_365DAY_DPD_MAX"]
    feature["INSTAL_DPD_120dALL_PERC"] = feature["INSTAL_120DAY_DPD_MAX"] /  feature["INSTAL_DPD_MAX"]
    feature["INSTAL_DPD_30d365_PERC"] = feature["INSTAL_30DAY_DPD_MAX"] /  feature["INSTAL_365DAY_DPD_MAX"] 
    feature["INSTAL_DPD_30d120_PERC"] = feature["INSTAL_30DAY_DPD_MAX"] /  feature["INSTAL_120DAY_DPD_MAX"] 
    feature["INSTAL_DPD_30dALL_PERC"] = feature["INSTAL_30DAY_DPD_MAX"] /  feature["INSTAL_DPD_MAX"] 
    feature["INSTAL_ENTRY_PAYMENT_3T10_PERC"] = feature["INSTAL_3TIMES_DAYS_ENTRY_PAYMENT_STD"] /  feature["INSTAL_10TIMES_DAYS_ENTRY_PAYMENT_STD"] 
    gc.collect()
    return feature        


# In[20]:

def top_k_ins_by_prev(feature) :
    ins = pd.read_csv(path + 'installments_payments.csv', nrows=None)
    ins.sort_values(by=['SK_ID_CURR', 'DAYS_INSTALMENT'], ascending=False, inplace=True)
    df_temp = ins.groupby(['SK_ID_CURR', 'SK_ID_PREV'])['DAYS_INSTALMENT'].max().reset_index().rename(columns = {'DAYS_INSTALMENT' : 'near_DAYS_INSTALMENT'}).astype('float32')
    ins = ins.merge(df_temp, on=['SK_ID_CURR', 'SK_ID_PREV'], how='left')
    #prev是第几个
    ins['top_k_PREV'] = ins.groupby(['SK_ID_CURR'])['near_DAYS_INSTALMENT'].rank(method='dense', ascending=False).astype('float32')
    del ins['near_DAYS_INSTALMENT']

    ins['instalment_paid_late_in_days'] = ins['DAYS_ENTRY_PAYMENT'] - ins['DAYS_INSTALMENT'] 
    ins['instalment_paid_late'] = (ins['instalment_paid_late_in_days'] > 0).astype(int)
    ins['instalment_paid_over_amount'] = ins['AMT_PAYMENT'] - ins['AMT_INSTALMENT']
    ins['instalment_paid_over'] = (ins['instalment_paid_over_amount'] > 0).astype(int) 

    features = pd.DataFrame({'SK_ID_CURR':ins['SK_ID_CURR'].unique()})
    features = features.set_index('SK_ID_CURR')


    aggregations = {
        'SK_ID_PREV' : ['count'],
        'NUM_INSTALMENT_VERSION' : ['nunique', 'mean'],
        'NUM_INSTALMENT_NUMBER' : ['mean','var', 'max'],
        'DAYS_INSTALMENT': ['min', 'mean', 'var', 'max'],
        'AMT_INSTALMENT': ['max', 'mean', 'sum', 'var'],
        'AMT_PAYMENT': ['min', 'max', 'mean', 'sum', 'var'],
        'DAYS_ENTRY_PAYMENT': ['min', 'mean', 'var', 'max'],
        'instalment_paid_late_in_days' : ['max', 'mean', 'sum', 'var'],
        'instalment_paid_over_amount' : ['max', 'mean', 'sum', 'var'],
        'instalment_paid_late' : ['mean'],
        'instalment_paid_over' : ['mean']
    }

    for top_k in [1,2,3] :
        ins_top_k = ins[ins.top_k_PREV == top_k]
        ins_agg = ins_top_k.groupby('SK_ID_CURR').agg(aggregations).astype('float32')
        ins_agg.columns = pd.Index(['INS_top_' + str(top_k) + '_prev_' + e[0] + "_" + e[1].upper() for e in ins_agg.columns.tolist()])
        features = features.merge(ins_agg, on='SK_ID_CURR', how='left')

    #删除重复特征
    del features['INS_top_1_prev_DAYS_INSTALMENT_MAX']
    del features['INS_top_1_prev_DAYS_ENTRY_PAYMENT_MAX']
    
    feature = pd.merge(feature,features,on='SK_ID_CURR', how='left')   
    return feature


# In[29]:

df = application_train_test(num_rows)
df = bureau_and_balance(df)
df = previous_applications(df)
df = pos_cash(df)
df = installments_payments(df)
df = credit_card_balance(df)

df = association_perc(df)
df = top_k_ins_by_prev(df)


# In[30]:

data = df[~df.TARGET.isnull()]
test = df[df.TARGET.isnull()]
del df


# In[31]:

ids = data['SK_ID_CURR']
y = data['TARGET']


# In[32]:

drop_col = [f for f in drop_col if f in data.columns]
test = test.drop(drop_col,axis=1)
data = data.drop(drop_col,axis=1)
gc.collect()


# In[33]:

# set params
params = [######高CV，低线上 可乐参数######
          { 'boosting_type': 'gbdt',
            'objective': 'binary',
            'metric': {'auc'},
            'learning_rate': 0.01,
            'max_depth':8,
            'num_leaves': 35,              
            'feature_fraction':0.125681745820782, 
            'bagging_freq': 5,
            'min_split_gain':0.0970905919552776,
            'min_child_weight':9.42012323936088,
            'reg_alpha':4.82988348810309,
            'reg_lambda':4.23709841316042,
            'verbose': 1},
          ######高线上，低CV  开源参数######
          { 'boosting_type': 'gbdt',
            'objective': 'binary',
            'metric': {'auc'},
            'learning_rate': 0.015,
            'max_depth':8,
            'num_leaves': 35,              
            'colsample_bytree':0.9497036,   
            'subsample':0.8715623,            
            'bagging_freq': 5,
            'min_split_gain':0.0222415,
            'min_child_weight':39.3259775,
            'reg_alpha':0.041545473,
            'reg_lambda':0.0735294,  
            'verbose': 1,},
    
           ######TH 参数######
          { 'boosting_type': 'gbdt',
            'objective': 'binary',
            'metric': {'auc'},
            'learning_rate': 0.02,
            'max_depth':8,
            'num_leaves': 34,              
            'feature_fraction' : 0.125681745820782,
            'bagging_fraction' : 0.967396467593587,
            'bagging_freq':5,
            'min_split_gain':0.0970905919552776,
            'min_child_weight':9.42012323936088,
            'reg_alpha':4.82988348810309,
            'reg_lambda':4.23709841316042,
            'verbose': 1,}
         ]


# In[ ]:

#########################开始训练###################################
folds = StratifiedKFold(n_splits= 5 , shuffle=True, random_state=seed)

oof_preds = np.zeros(data.shape[0])
sub_preds = np.zeros(test.shape[0])

feature_importance_df = pd.DataFrame()

feats = [f for f in data.columns if f not in  ['SK_ID_CURR',"TARGET"]]

for n_fold, (trn_idx, val_idx) in enumerate(folds.split(data, y)):
    X_train, y_train = data[feats].iloc[trn_idx], y.iloc[trn_idx]
    X_test, y_test = data[feats].iloc[val_idx], y.iloc[val_idx]

    lgb_train = lgb.Dataset(X_train, y_train)
    del X_train, y_train,
    lgb_eval = lgb.Dataset(X_test,y_test,reference=lgb_train)
        
    clf = lgb.train(params[0],
                    lgb_train,
                    num_boost_round=20000,
                    valid_sets=[lgb_eval],
                    early_stopping_rounds=200,
                    verbose_eval=100)

    oof_preds[val_idx] = clf.predict(X_test, num_iteration=clf.best_iteration)
    
    sub = pd.Series(clf.predict(test[feats], num_iteration=clf.best_iteration)).rank(pct=True).values
    sub_preds +=  sub / (folds.n_splits)
        
    fold_importance_df = pd.DataFrame()
    fold_importance_df["feature"] = clf.feature_name()
    fold_importance_df["importance"] = clf.feature_importance()
    fold_importance_df["fold"] = n_fold + 1
    feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)
    
    print('Fold %2d AUC : %.6f' % (n_fold + 1, roc_auc_score(y_test, oof_preds[val_idx])))
    del X_test, y_test
    gc.collect()
print('Full AUC score %.6f' % roc_auc_score(y, oof_preds))


# In[ ]:

test['TARGET'] = sub_preds
df_oof_preds = pd.DataFrame({'SK_ID_CURR':ids, 'TARGET':y, 'PREDICTION':oof_preds})
df_oof_preds = df_oof_preds[['SK_ID_CURR', 'TARGET', 'PREDICTION']]


# In[ ]:

now = datetime.now()
score = str(round(roc_auc_score(y, oof_preds), 6)).replace('.', '')
sub_file = '../sub/submission_5x-average-LGB-run-01-v1_loss_1fold' + score + '_' + str(now.strftime('%Y-%m-%d-%H-%M')) + "_seed_" + str(seed) + '.csv'
test[['SK_ID_CURR', 'TARGET']].to_csv(sub_file, index=False)


# In[ ]:

folds_idx = [(trn_idx, val_idx) for trn_idx, val_idx in folds.split(data, y)]
display_importances(feature_importance_df_=feature_importance_df)


# In[ ]:

display_roc_curve(y_=y, oof_preds_=oof_preds, folds_idx_=folds_idx)